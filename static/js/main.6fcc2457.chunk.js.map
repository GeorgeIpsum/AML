{"version":3,"sources":["dummies/button/button.tsx","models/deposit/deposit.ts","utilities/helpers.ts","models/status.ts","models/deposit-list-store/deposit-list-store.ts","models/context/context.ts","models/context/context-list-store.ts","models/root-store/root-store.ts","models/environment.ts","utilities/storage.ts","services/api/api-problem.ts","services/api/api-config.ts","services/api/api.ts","services/deposit-api/deposit-api.ts","services/context-api/context-api.ts","app/setup-root-store.ts","components/context-select/context-select.tsx","components/deposit-form/deposit-form.tsx","components/deposit-list-item/deposit-list-item.tsx","components/root-component/root-component.tsx","app/App.tsx","serviceWorker.js","index.tsx"],"names":["DepositStatus","Button","props","variant","bg","style","background","type","className","onClick","children","DepositModel","types","model","id","optional","identifier","value","string","status","enumeration","Object","values","unprocessed","dateAdded","Date","dateEdited","hash","context","actions","self","setId","setValue","setStatus","_objectAssign$1","assign","target","TypeError","prop","obj","output","idx","length","arguments","source","nextKey","prototype","hasOwnProperty","call","_isPlaceholder","a","_curry1","fn","f1","apply","this","_isArray","Array","isArray","val","toString","_isArrayLike","x","_isString","nodeType","recursive","LoadingStatus","UUIDGenerator","replace","c","crypto","getRandomValues","Uint8Array","isNil","list","concat","flatt","jlen","j","result","ilen","DepositListStoreModel","idle","deposits","array","setDeposits","clear","addDeposit","deposit","create","changeDeposit","index","views","getEnv","getRoot","slice","sort","d1","d2","getTime","loadDeposits","flow","pending","environment","depositApi","getDeposits","kind","done","error","chronoView","chronological","findByContext","contextID","filter","ContextModel","name","setName","root","depositStore","console","log","ContextListStoreModel","contexts","setContexts","addContext","changeContext","c1","c2","C1","toUpperCase","C2","findByName","find","RootStoreModel","contextStore","user","signIn","email","password","api","signInUser","Environment","contextApi","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","load","key","VALUE","localStorage","getItem","JSON","parse","save","setItem","stringify","getGeneralApiProblem","response","problem","temporary","DEFAULT_API_CONFIG","url","timeout","Api","config","apisauce","auth","createUser","createUserWithEmailAndPassword","then","rsn","signInWithEmailAndPassword","signOutUser","signOut","baseURL","headers","app","initializeApp","username","get","ok","resultUser","DepositApi","Accept","e","message","completed","params","data","ContextApi","ROOT_STATE_STORAGE_KEY","setupRootStore","createEnvironment","env","storage","rootStore","onSnapshot","snapshot","setup","ContextSelect","observer","onContextChange","event","setState","selected","add","state","map","placeholder","onChange","React","Component","DepositForm","onFormSubmit","preventDefault","formInput","onSubmit","onInputChange","clearForm","store","size","DepositListItem","onCheckChange","checked","changeStatus","textDecoration","textDecorationColor","date","toDateString","RootComponent","onDepositFormSubmit","onClear","onChangeStatus","depositIndex","findIndex","d","actedUpon","changeShown","hide","test","padding","marginRight","App","authStateChange","userState","authStateChangeError","changeTheme","themeDark","onAuthStateChanged","position","bottom","right","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fcc2457.chunk.js","sourcesContent":["import React from 'react';\nimport './button.scss';\n\nconst Button = (props: any) => {\n  const variant = props.variant && props.variant;\n  let bg = \"#3454D1\";\n  if(variant) {\n    switch(variant) {\n      case \"theme\":\n        bg = \"#922D50\";\n        break;\n      default:\n        bg = \"#3454D1\";\n        break;\n    }\n  }\n\n  return(\n    <button style={{background: bg, ...props.style}} type=\"button\" className=\"Button\" onClick={props.onClick}>{props.children}</button>\n  );\n};\n\nexport default Button;","import { types } from 'mobx-state-tree';\n\nexport enum DepositStatus {\n  unprocessed = \"unprocessed\",\n  trashed = \"trashed\",\n  incubated = \"incubated\",\n  referenced = \"referenced\",\n  actedUpon = \"acted upon\",\n  deferred = \"deferred\",\n  delegated = \"delegated\",\n  addedToProject = \"added to project\"\n};\n\nexport const DepositModel = types.model(\"Deposit\")\n  .props({\n    id: types.optional(types.identifier, 'xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx'),\n    value: types.string,\n    status: types.optional(types.enumeration<DepositStatus>(\"DepositStatus\", Object.values(DepositStatus)), DepositStatus.unprocessed),\n    dateAdded: types.optional(types.Date, new Date()),\n    dateEdited: types.optional(types.Date, new Date()),\n    hash: types.optional(types.string, ''),\n    context: types.string\n  })\n  .actions(self => ({\n    setId(value: string) {\n      self.id = value;\n    },\n    setValue(value: string) {\n      self.value = value;\n      self.dateEdited = new Date();\n    },\n    setStatus(value: DepositStatus) {\n      self.status = value;\n      self.dateEdited = new Date();\n    }\n  }));\n\ntype DepositType = typeof DepositModel.Type;\nexport interface Deposit extends DepositType {};\n\ntype DepositSnapshotType = typeof DepositModel.SnapshotType;\nexport interface DepositSnapshot extends DepositSnapshotType {};","//helpers.ts utility\n\nexport function _has(prop, obj): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction _objectAssign(target) {\n  if(target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n  let output = Object(target);\n  let idx = 1;\n  let length = arguments.length;\n  while(idx < length) {\n    var source = arguments[idx];\n    if(source != null) {\n      for(var nextKey in source) {\n        if(_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n}\n\nconst _objectAssign$1 = typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n\nfunction _isPlaceholder(a) {\n  return a != null &&\n    typeof a === 'object' &&\n    a['@@functional/placeholder'] === true;\n}\n\nfunction _curry1(fn) {\n  return function f1(a) {\n    if(arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}\n\nconst _isArray = Array.isArray || function _isArray(val) {\n  return (val != null &&\n          val.length >= 0 &&\n          Object.prototype.toString.call(val) === '[object Array]');\n};\n\nfunction _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}\n\nconst _isArrayLike = _curry1(function _isArrayLike(x) {\n  if(_isArray(x)) { return true; }\n  if (!x) { return false; }\n  if(typeof x !== 'object') { return false; }\n  if(_isString(x)) { return false; }\n  if(x.nodeType === 1) { return !!x.length; }\n  if(x.length === 0) { return true; }\n  if(x.length > 0) { return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1); }\n  return false;\n});\n\nfunction _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while(idx < ilen) {\n      if(_isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while(j < jlen) {\n          //@ts-ignore\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        //@ts-ignore\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n}\n\n\n/**\n * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n * HERE BE THE EXPORTED FUNCTIONS\n * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n */\n\n \n/**\n * Adds a key value/ index value pair to an object, return original object if key or index already exists\n * \n * @param obj the object\n * @param key key value to be added\n * @param value value at said key value to be added\n * @param index index to use\n */\nexport const addToObject = (obj: Object, key: string, value: any, index: number): Object => {\n  let temp = {};\n  let i = 0;\n\n  for(var prop in obj) {\n    if(obj.hasOwnProperty(prop)) {\n      if(i===index&&key&&value) {\n        temp[key] = value;\n      }\n      temp[prop] = obj[prop];\n      i++;\n    }\n  }\n  if(!index&&key&&value) {\n    temp[key] = value;\n  }\n  return temp;\n}\n\n/**\n * Debounce function\n * \n * @param fn the function to debounce\n */\nexport const debounce = (fn) => {\n  let timeout;\n\n  return function() {\n    let context = this;\n    let args = arguments;\n\n    if(timeout) {\n      window.cancelAnimationFrame(timeout);\n    }\n\n    timeout = window.requestAnimationFrame(function() {\n      fn.apply(context, args);\n    });\n  }\n}\n\n/**\n * Delay function call for some x milliseconds\n * \n * @param ms milliseconds to delay\n */\nexport const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Shuffles an array\n * \n * @param array the array to shuffle\n */\nexport const shuffle = (array: any[]): any[] => {\n  let currentIndex = array.length;\n  let temporaryValue, randomIndex;\n\n  while(0!==currentIndex) {\n    randomIndex = Math.floor(Math.random()*currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  \n  return array;\n}\n\n/**\n * Chooses a random item from an array\n * \n * @param array ...the array\n */\nexport const chooseRandomItem = (array: any[]): any => {\n  return array[Math.floor(Math.random()*array.length)];\n}\n\n/**\n * Converts an array into a CSV string\n * \n * @param array array to convert\n * @param delimiter delimiter to use between values. defaults to ','\n */\nexport const arrayToCsv = (array: any, delimiter: string = ','): string => {\n  return array.map(v => v.map(x => (isNaN(x) ? `\"${x.replace(/\"/g, '\"\"')}\"` : x)).join(delimiter)).join('\\n');\n}\n\n/**\n * Returns intersection of 2 arrays\n * \n * @param a first array\n * @param b second array\n */\nexport const intersection = (a: any[], b: any[]) => {\n  const s = new Set(b);\n  return a.filter(x => s.has(x));\n}\n\n/**\n * Generate a hash for an object\n * \n * @param object object to generate hash for\n * @param key \n */\nexport const toHash = (object: Object, key: string) => {\n  return Array.prototype.reduce.call(\n    object,\n    // eslint-disable-next-line\n    (acc: any, data, index) => ((acc[!key ? index : data[key]] = data), acc),\n    {}\n  );\n}\n\n/**\n * Generates a UUID in a browser\n */\nexport const UUIDGenerator = () => {\n  //@ts-ignore\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n    (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)\n  );\n}\n\n/**\n * Get size of object, array, or string\n * \n * @param val array, object, or string to measure size of\n */\nexport const size = (val: any): number =>\n  Array.isArray(val)\n    ? val.length\n    : val && typeof val === 'object'\n    ? val.size || val.length || Object.keys(val).length\n    : typeof val === 'string'\n    ? new Blob([val]).size\n    : 0;\n\nexport const mergeAll = _curry1(function mergeAll(list) {\n  //@ts-ignore\n  return _objectAssign$1.apply(null, [{}].concat(list));\n});\n\nexport const flatten = _curry1(_makeFlat(true));\n\nexport const isNil = _curry1(function isNil(x) { return x == null; });\n\n","export enum LoadingStatus {\n  idle = \"idle\",\n  pending = \"pending\",\n  done = \"done\",\n  error = \"error\"\n};","import { types, getEnv, getRoot } from 'mobx-state-tree';\nimport { DepositModel, Deposit, DepositSnapshot, DepositStatus } from '../deposit';\n//import { RootStore } from '../root-store';\nimport { Environment } from '../environment';\nimport { flow } from 'mobx';\nimport { UUIDGenerator } from '../../utilities/helpers';\nimport * as hash from 'object-hash';\nimport { LoadingStatus } from '../status';\n\nexport const DepositListStoreModel = types.model(\"DepositListStore\")\n  .props({\n    status: types.optional(types.enumeration<LoadingStatus>(\"DepositListLoadingStatus\", Object.values(LoadingStatus)), LoadingStatus.idle),\n    deposits: types.optional(types.array(DepositModel), [])\n  })\n  .actions(self => ({ //all setters go here\n    setStatus(value: LoadingStatus) {\n      self.status = value;\n    },\n    setDeposits(value: Deposit[] | DepositSnapshot[] | null) {\n      if(self.deposits) {\n        if(value) {\n          self.deposits.replace(value as any);\n        } else {\n          self.deposits.clear();\n        }\n      } else {\n        self.deposits = value as any;\n      }\n    },\n    addDeposit({value, status, context} = {value: '', status: DepositStatus.unprocessed, context: ''}): boolean {\n      if(self.deposits) {\n        const deposit: Deposit = DepositModel.create({\n          id: UUIDGenerator(),\n          value: value,\n          status: status,\n          dateAdded: new Date(),\n          dateEdited: new Date(),\n          hash: hash({value: value, status: status, dateAdded: new Date()}),\n          context: context\n        });\n        const deposits = [...self.deposits, ...[deposit]];\n        self.deposits.replace(deposits as any);\n        return true;\n      } else {\n        return false;\n      }\n    },\n    changeDeposit(index, {value, status}) {\n      if(self.deposits && self.deposits[index]) {\n        if(value && value!=='') {\n          self.deposits[index].setValue(value);\n          return true;\n        }\n        if(status && status!=='') {\n          self.deposits[index].setStatus(status);\n          return true;\n        }\n        return false;\n      }\n      return false;\n    }\n  }))\n  .views(self => ({\n    get environment() {\n      return getEnv(self) as Environment;\n    },\n    get rootStore() {\n      return getRoot(self) as any; //returning this as RootStore results in ts calling a circular reference\n    },\n    get isLoading() {\n      return self.status === \"pending\";\n    },\n    get chronological() {\n      return self.deposits.slice().sort((d1, d2) => {\n        return d1.dateAdded.getTime() < d2.dateAdded.getTime() ? 1 : d1.dateAdded.getTime() > d2.dateAdded.getTime() ? -1 : 0;\n      });\n    }\n  }))\n  .actions(self => ({\n    loadDeposits: flow(function*() {\n      self.setStatus(LoadingStatus.pending);\n      try { \n        const result = yield self.environment.depositApi.getDeposits();\n\n        //@ts-ignore\n        if(result.kind === \"ok\") {\n          //@ts-ignore\n          self.setDeposits(result.deposits);\n          self.setStatus(LoadingStatus.done);\n        } else {\n          self.setStatus(LoadingStatus.error);\n        }\n      } catch {\n        self.setStatus(LoadingStatus.error);\n      }\n    }),\n  }))\n  .views(self => ({\n    chronoView(deposits?: any) {\n      if(deposits) {\n        return deposits.slice().sort((d1, d2) => {\n          return d1.dateAdded.getTime() < d2.dateAdded.getTime() ? 1 : d1.dateAdded.getTime() > d2.dateAdded.getTime() ? -1 : 0;\n        });\n      } else {\n        return self.chronological;\n      }\n    },\n    findByContext(contextID: string) {\n      return self.deposits.filter((deposit) => {\n        return deposit.context===contextID;\n      });\n    }\n  }));\n\ntype DepositStoreType = typeof DepositListStoreModel.Type;\nexport interface DepositStore extends DepositStoreType {};","import { types, getRoot } from 'mobx-state-tree';\n\nexport const ContextModel = types.model(\"Context\")\n  .props({\n    id: types.identifier,\n    name: types.string\n  })\n  .actions(self => ({\n    setName(value: string) {\n      self.name = value;\n    }\n  }))\n  .views(self => ({\n    get deposits() {\n      const root = getRoot(self);\n      if(root && root.depositStore) {\n        return root.depositStore.findByContext(self.id);\n      }\n      console.log(root);\n      return [];\n    }\n  }));\n\ntype ContextType = typeof ContextModel.Type;\nexport interface Context extends ContextType {};\n\ntype ContextSnapshotType = typeof ContextModel.SnapshotType;\nexport interface ContextSnapshot extends ContextSnapshotType {};","import { types, getEnv, getRoot } from 'mobx-state-tree';\nimport { Environment } from '../environment';\nimport { LoadingStatus } from '../status';\nimport { ContextModel, Context, ContextSnapshot } from './context';\nimport { UUIDGenerator } from '../../utilities/helpers';\n\nexport const ContextListStoreModel = types.model(\"ContextListStore\")\n  .props({\n    status: types.optional(types.enumeration<LoadingStatus>(\"ContextListLoadingStatus\", Object.values(LoadingStatus)), LoadingStatus.idle),\n    contexts: types.optional(types.array(ContextModel), [])\n  })\n  .actions(self => ({\n    setStatus(value: LoadingStatus) {\n      self.status = value;\n    },\n    setContexts(value: Context[] | ContextSnapshot[] | null) {\n      if(self.contexts) {\n        if(value) {\n          self.contexts.replace(value as any);\n        } else {\n          self.contexts.clear();\n        }\n      } else {\n        self.contexts = value as any;\n      }\n    },\n    addContext(name: string = '') {\n      if(self.contexts) {\n        const context: Context = ContextModel.create({\n          id: UUIDGenerator(),\n          name: name\n        });\n        const contexts = [...self.contexts, ...[context]];\n        self.contexts.replace(contexts as any);\n        return true;\n      } else {\n        return false;\n      }\n    },\n    changeContext(index, name?) {\n      if(self.contexts && self.contexts[index]) {\n        if(name) {\n          self.contexts[index].setName(name);\n          return true;\n        }\n        return false;\n      }\n      return false;\n    }\n  }))\n  .views(self => ({\n    get environment() {\n      return getEnv(self) as Environment;\n    },\n    get rootStore() {\n      return getRoot(self) as any;\n    },\n    get isLoading() {\n      return self.status === \"pending\";\n    },\n    get alphabetical() {\n      return self.contexts.slice().sort((c1, c2) => {\n        const C1 = c1.name.toUpperCase(); const C2 = c2.name.toUpperCase();\n        return (C2 < C1) ? -1 : (C1 > C2) ? 1 : 0;\n      });\n    }\n  }))\n  .actions(self => ({\n    findByName(name: string) {\n      const value = self.contexts.find((c) => c.name === name);\n      if(value) {\n        return value;\n      } else {\n        return false;\n      }\n    }\n  }));\n\ntype ContextStoreType = typeof ContextListStoreModel.Type;\nexport interface ContextStore extends ContextStoreType {};","import { types, getEnv } from 'mobx-state-tree';\n//add other store model imports here here\nimport { DepositListStoreModel } from '../deposit-list-store';\nimport { ContextListStoreModel } from '../context';\nimport { Environment } from '../environment';\n\n/**\n * The RootStore model\n */\nexport const RootStoreModel = types.model(\"RootStore\")\n  .props({\n    //add other stores here in format: someStore: types.optional(SomeStoreModel, {})\n    depositStore: types.optional(DepositListStoreModel, {}),\n    contextStore: types.optional(ContextListStoreModel, {}),\n    user: types.optional(types.string, '')\n  })\n  .views(self => ({\n    get environment() {\n      return getEnv(self) as Environment;\n    }\n  }))\n  .actions(self => ({\n    signIn(email, password) {\n      return self.environment.api.signInUser(email, password);\n    },\n  }));\n\n/**\n * The RootStore instance\n */\nexport type RootStore = typeof RootStoreModel.Type;\n\n\n/**\n * The RootStore data\n */\nexport type RootStoreSnapshot = typeof RootStoreModel.SnapshotType;","import { Api } from '../services/api';\nimport { DepositApi } from '../services/deposit-api';\nimport { ContextApi } from '../services/context-api';\n\nexport class Environment {\n  api: Api;\n  depositApi: DepositApi;\n  contextApi: ContextApi;\n};\n\nexport const firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};","//storage.ts utility\n/**\n * Loads string from localStorage.\n * \n * @param key The key to fetch\n */\nexport const loadString = (key: string): string | null => {\n  return localStorage.getItem(key);\n}\n\n/**\n * Saves a string value to localStorage.\n * \n * @param key The key to save to\n * @param value The string to save\n */\nexport const saveString = (key: string, value: string): boolean => {\n  try {\n    localStorage.setItem(key, value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Loads an object string from localStorage and returns the object.\n * \n * @param key The key to fetch\n */\nexport const load = (key: string): any | null => {\n  const VALUE = localStorage.getItem(key);\n  if(typeof VALUE === 'string') {\n    return JSON.parse(VALUE);\n  } else return null;\n}\n\n/**\n * Saves objects and all other values to localStorage.\n * \n * @param key The key to save to\n * @param value The value (can be an object) to save\n */\nexport const save = (key: string, value: any): boolean => {\n  try {\n    if(typeof value === 'object') {\n      localStorage.setItem(key, JSON.stringify(value));\n    } else {\n      localStorage.setItem(key, value);\n    }\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Removes a key-value pair from localStorage.\n * \n * @param key The key to remove\n */\nexport const remove = (key: string): boolean => {\n  try {\n    localStorage.removeItem(key);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Clears all localStorage.\n */\nexport const clear = (): boolean => {\n  try {\n    localStorage.clear();\n    return true;\n  } catch {\n    return false;\n  }\n}","import { ApiResponse } from 'apisauce';\n\nexport type GeneralApiProblem = \n  /**\n   * Times up.\n   */\n  | { kind: \"timeout\"; temporary: true }\n  /**\n   * Cannot connect to the server for some reason.\n   */\n  | { kind: \"cannot-connect\"; temporary: true }\n  /**\n   * The server experienced a problem. Any 5xx error.\n   */\n  | { kind: \"server\" }\n  /**\n   * We're not allowed because we haven't identified ourself. This is 401.\n   */\n  | { kind: \"unauthorized\" }\n  /**\n   * We don't have access to perform that request. This is 403.\n   */\n  | { kind: \"forbidden\" }\n  /**\n   * Unable to find that resource.  This is a 404.\n   */\n  | { kind: \"not-found\" }\n  /**\n   * All other 4xx series errors.\n   */\n  | { kind: \"rejected\" }\n  /**\n   * Something truly unexpected happened. Most likely can try again. This is a catch all.\n   */\n  | { kind: \"unknown\"; temporary: true }\n  /**\n   * The data we received is not in the expected format.\n   */\n  | { kind: \"bad-data\" }\n\n/**\n * Attempts to get a common cause of problems from an api response.\n *\n * @param response The api response.\n */\nexport function getGeneralApiProblem(response: ApiResponse<any>): GeneralApiProblem | void | null {\n  switch (response.problem) {\n    case \"CONNECTION_ERROR\":\n      return { kind: \"cannot-connect\", temporary: true };\n    case \"NETWORK_ERROR\":\n      return { kind: \"cannot-connect\", temporary: true };\n    case \"TIMEOUT_ERROR\":\n      return { kind: \"timeout\", temporary: true };\n    case \"SERVER_ERROR\":\n      return { kind: \"server\" };\n    case \"UNKNOWN_ERROR\":\n      return { kind: \"unknown\", temporary: true };\n    case \"CLIENT_ERROR\":\n      switch (response.status) {\n        case 401:\n          return { kind: \"unauthorized\" };\n        case 403:\n          return { kind: \"forbidden\" };\n        default:\n          return { kind: \"rejected\" };\n      }\n    case \"CANCEL_ERROR\":\n      return null;\n  }\n\n  return null;\n}","\n\nexport interface ApiConfig {\n  url: string,\n  timeout: number,\n}\n\nexport const DEFAULT_API_CONFIG: ApiConfig = {\n  url: \"https://api.github.com\",\n  timeout: 1000,\n}","import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport { getGeneralApiProblem } from './api-problem';\nimport { ApiConfig, DEFAULT_API_CONFIG } from './api-config';\nimport * as Types from './api.types';\nimport app from 'firebase';\nimport { firebaseConfig } from '../../models/environment';\n\nexport class Api {\n  apisauce: ApisauceInstance;\n  config: ApiConfig;\n  auth: app.auth.Auth;\n  user: app.User | null | any;\n\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\n    this.config = config;\n    this.user = {\n      email: 'test'\n    };\n  }\n\n  setup() {\n    this.apisauce = create({\n      baseURL: this.config.url,\n      timeout: this.config.timeout,\n      headers: {},\n    });\n\n    app.initializeApp(firebaseConfig);\n\n    this.auth = app.auth();\n  }\n\n  async getUser(username: string): Promise<Types.GetUserResult> {\n    const response: ApiResponse<any> = await this.apisauce.get(`/users/${username}`);\n\n    if(!response.ok) {\n      const problem = getGeneralApiProblem(response);\n      if(problem) return problem;\n    }\n\n    try {\n      const resultUser: Types.User = {\n\n      }\n      return { kind: \"ok\", user: resultUser };\n    } catch {\n      return { kind: \"bad-data\" };\n    }\n  }\n\n  createUser = (email, password) => {\n    this.auth.createUserWithEmailAndPassword(email, password).then((val) => {\n      this.user = val.user as app.User;\n    }, (rsn) => {\n      this.signInUser(email, password);\n    });\n  }\n\n  signInUser = (email, password): Promise<app.auth.UserCredential> => {\n    let a = this.auth.signInWithEmailAndPassword(email, password);\n    return a;\n    // this.auth.signInWithEmailAndPassword(email, password).then((val) => { console.log('yesy',val); this.user = val.user; console.log(this.user); }, (rsn) => { console.log('no',rsn) });\n  }\n\n  signOutUser = () => this.auth.signOut();\n}","import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport { getGeneralApiProblem } from '../api/api-problem';\nimport { ApiConfig, DEFAULT_API_CONFIG } from '../api/api-config';\nimport * as Types from './deposit-api.types';\nimport { isNil } from '../../utilities/helpers';\nimport { DepositSnapshot } from '../../models/deposit';\n\nexport class DepositApi {\n  apisauce: ApisauceInstance;\n\n  config: ApiConfig;\n\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\n    this.config = config;\n  }\n\n  setup() {\n    try {\n      this.apisauce = create({\n        baseURL: this.config.url,\n        timeout: this.config.timeout,\n        headers: {\n          Accept: \"application/json\",\n        },\n      });\n    } catch(e) {\n      console.error(e.message);\n    }\n  }\n\n  async getDeposits(completed?: boolean): Promise<Types.GetDepositsResult> {\n    const params = isNil(completed) ? {} : { completed };\n    const response: ApiResponse<any> = await this.apisauce.get(`/deposits`, params);\n    \n    if(!response.ok) {\n      const problem = getGeneralApiProblem(response);\n      if(problem) return problem;\n    }\n\n    try {\n      const deposits: DepositSnapshot[] = response.data;\n      return { kind: \"ok\", deposits };\n    } catch {\n      return { kind: \"bad-data\" };\n    }\n  }\n}","import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport { getGeneralApiProblem } from '../api/api-problem';\nimport { ApiConfig, DEFAULT_API_CONFIG } from '../api/api-config';\nimport * as Types from './context-api.types';\nimport { isNil } from '../../utilities/helpers';\nimport { ContextSnapshot } from '../../models/context';\n\nexport class ContextApi {\n  apisauce: ApisauceInstance;\n\n  config: ApiConfig;\n\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\n    this.config = config;\n  }\n\n  setup() {\n    try {\n      this.apisauce = create({\n        baseURL: this.config.url,\n        timeout: this.config.timeout,\n        headers: {\n          Accept: \"application/json\",\n        },\n      })\n    } catch(e) {\n      console.error(e.message);\n    }\n  }\n\n  async getContexts(completed?: boolean): Promise<Types.GetContextsResult> {\n    const params = isNil(completed) ? {} : { completed };\n    const response: ApiResponse<any> = await this.apisauce.get(`/contexts`, params);\n\n    if(!response.ok) {\n      const problem = getGeneralApiProblem(response);\n      if(problem) return problem;\n    }\n\n    try {\n      const contexts: ContextSnapshot[] = response.data;\n      return { kind: \"ok\", contexts };\n    } catch {\n      return { kind: \"bad-data\" };\n    }\n  }\n}","import { onSnapshot } from 'mobx-state-tree';\nimport { RootStoreModel, RootStore } from '../models/root-store';\nimport { Environment } from '../models/environment';\nimport * as storage from '../utilities/storage';\nimport { Api } from '../services/api';\nimport { DepositApi } from '../services/deposit-api';\nimport { ContextApi } from '../services/context-api';\n\nconst ROOT_STATE_STORAGE_KEY = \"AML\";\n\nexport async function setupRootStore() {\n  let rootStore: RootStore;\n  let data: any;\n\n  const env = await createEnvironment();\n  try {\n    data = (await storage.load(ROOT_STATE_STORAGE_KEY)) || {};\n    rootStore = RootStoreModel.create(data, env);\n  } catch {\n    rootStore = RootStoreModel.create({}, env);\n  }\n\n  onSnapshot(rootStore, snapshot => storage.save(ROOT_STATE_STORAGE_KEY, snapshot));\n\n  return rootStore;\n}\n\nexport async function createEnvironment() {\n  const env = new Environment();\n\n  env.api = new Api();\n  env.depositApi = new DepositApi();\n  env.contextApi = new ContextApi();\n\n  await env.api.setup();\n  await env.depositApi.setup();\n  await env.contextApi.setup();\n\n  return env;\n}","import React from 'react';\nimport './context-select.scss';\nimport { observer } from 'mobx-react';\n\n@observer\nexport default class ContextSelect extends React.Component<{contexts: any, addContext: any}, {selected: any, add: boolean}> {\n  constructor(props) {\n    super(props);\n    this.state = {selected: '', add: false};\n  }\n\n  onContextChange = (event) => {\n    this.setState({selected: event.target.value});\n    if(!this.findByName(event.target.value)) {\n      this.setState({add: true});\n    } else {\n      this.setState({add: false});\n    }\n  }\n\n  findByName = (name: string) => {\n    if(this.props.contexts) {\n      const value = this.props.contexts.find((c) => c.name === name);\n      if(value) {\n        return value;\n      } return false;\n    } return false;\n  }\n\n  render() {\n    const contexts = this.props && this.props.contexts && this.props.contexts.slice().map((c) => (<option key={c.id} value={c.name}/>));\n    return(\n      <div className=\"Context\">\n        <input placeholder=\"Context\" type=\"text\" list=\"context\" onChange={this.onContextChange} className=\"Context-Select\" />\n        <datalist id=\"context\">\n          {contexts}\n        </datalist>\n        <div className=\"add\" onClick={this.props.addContext(this.state.selected)}>\n          { this.state.add ? 'Add Context' : '' }\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { observer } from 'mobx-react';\nimport './deposit-form.scss';\nimport { X } from 'react-feather';\nimport ContextSelect from '../context-select';\n\ninterface DepositFormProps {\n  onSubmit: any,\n  store: any\n};\n\ninterface DepositFormState {\n  formInput: string\n};\n\n@observer\nexport default class DepositForm extends React.Component<DepositFormProps, DepositFormState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formInput: ''\n    };\n  }\n  \n  onFormSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if(this.state.formInput !== '') {\n      this.props.onSubmit(this.state.formInput);\n    }\n    this.setState({\n      formInput: ''\n    });\n  }\n\n  onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      formInput: event.target.value\n    });\n  }\n\n  clearForm = (event) => {\n    this.setState({\n      formInput: ''\n    });\n  }\n\n  addContext = (name?: string) => {\n    if(!this.props.store.contextStore.findByName(name)) {\n      this.props.store.contextStore.addContext(name);\n    }\n  }\n\n  render() {\n    const contexts = this.props && this.props.store && this.props.store.contextStore && this.props.store.contextStore.contexts;\n    return (\n      <div className=\"Deposit-Form\">\n        <form onSubmit={this.onFormSubmit} className=\"Deposit-Form-Form\">\n          <input type=\"text\" value={this.state.formInput} onChange={this.onInputChange}  className=\"Deposit-Form-Input\" />\n          <div className=\"Input-Border\"></div>\n          <input type=\"submit\" className=\"Button Deposit-Submit\" value=\"Add\" />\n          {this.state.formInput !== ''\n            ? (<button type=\"button\" className=\"Button Deposit-Clear\" onClick={this.clearForm}><X size={20} /></button>)\n            : null \n          }\n        </form>\n\n        <div className=\"Selections\">\n          <ContextSelect contexts={contexts} addContext={this.addContext} />\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './deposit-list-item.scss';\n\ntype DepositListItemProps = {\n\tvalue: string,\n\tdate: Date,\n\tstatus: boolean,\n\thash: string,\n\tchangeStatus: any\n};\ntype DepositListItemState = {\n\tchecked: boolean\n};\n\nexport default class DepositListItem extends React.Component<DepositListItemProps, DepositListItemState> {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tchecked: this.props.status\n\t\t};\n\t}\n\n\tonCheckChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tthis.setState({\n\t\t\tchecked: !this.state.checked\n\t\t});\n\t\tthis.props.changeStatus(event, this.props.hash);\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"Deposit-List-Item\">\n\t\t\t\t<div className=\"Deposit-Check\">\n\t\t\t\t\t<input type=\"checkbox\" checked={this.state.checked} onChange={this.onCheckChange} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"Deposit-Value\">\n\t\t\t\t\t<div className=\"Value\" style={{textDecoration: this.state.checked ? 'line-through' : 'none', textDecorationColor: 'rgba(255,255,255,0.7)'}}>{this.props.value}</div>\n\t\t\t\t\t<div className=\"Date\">{this.props.date.toDateString()}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport { RootStore } from '../../models/root-store';\nimport { DepositStore } from '../../models/deposit-list-store';\nimport { DepositStatus } from '../../models/deposit';\nimport { observer } from 'mobx-react';\nimport './root-component.scss';\nimport DepositForm from '../deposit-form';\nimport DepositListItem from '../deposit-list-item';\nimport Button from '../../dummies/button';\n\ninterface RootComponentProps {\n  rootStore: RootStore;\n  depositStore: DepositStore;\n}\n\n@observer\nexport default class RootComponent extends React.Component<RootComponentProps, {value: string, test: any, hide?: boolean}> {\n  constructor(props) {\n    super(props);\n\n    this.state = {value: \"\", test: \"\", hide: true};\n  }\n\n  onDepositFormSubmit = (value: string) => {\n    const deposit = {\n      value,\n      status: DepositStatus.unprocessed,\n      context: ''\n    }\n    this.props.depositStore.addDeposit(deposit);\n  }\n\n  onClear = (event) => {\n    this.props.depositStore.setDeposits(null);\n  }\n\n  onChangeStatus = (event, hash) => {\n    const depositIndex = this.props.depositStore.deposits.findIndex((d) => d.hash === hash);\n    this.props.depositStore.changeDeposit(depositIndex, {value: '', status: this.props.depositStore.deposits[depositIndex].status === DepositStatus.unprocessed ? DepositStatus.actedUpon : DepositStatus.unprocessed});\n  }\n\n  changeShown = () => {\n    this.setState({hide: !this.state.hide});\n  }\n\n  render() {\n    const deposits = this.props.depositStore.chronological.map((d) => {\n      if(!this.state.hide) {\n        if(d.status===DepositStatus.unprocessed) {\n          return (<DepositListItem key={d.hash} hash={d.hash} value={d.value} status={d.status !== DepositStatus.unprocessed} date={d.dateAdded} changeStatus={this.onChangeStatus} />)\n        } else {\n          return null;\n        }\n      } else {\n        return (<DepositListItem key={d.hash} hash={d.hash} value={d.value} status={d.status !== DepositStatus.unprocessed} date={d.dateAdded} changeStatus={this.onChangeStatus} />)\n      }\n    }) as any;\n\n    return (\n      <div className=\"Root\">\n        <DepositForm onSubmit={this.onDepositFormSubmit} store={this.props.rootStore} />\n        { deposits }\n        <Button style={{padding: '0.5rem', marginRight: '0.4rem'}} onClick={this.onClear}>Clear Deposits</Button>\n        <Button style={{padding: '0.5rem'}} onClick={this.changeShown}>{ this.state.hide ? 'Hide Finished' : 'Show Finished' }</Button>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './App.scss';\n\nimport Button from '../dummies/button';\n\nimport { RootStore } from '../models/root-store';\nimport { setupRootStore } from './setup-root-store';\nimport RootComponent from '../components/root-component';\nimport { observer } from 'mobx-react';\n\ninterface AppState {\n  rootStore?: RootStore,\n  userState: any,\n  themeDark: boolean\n}\n\n@observer\nexport default class App extends React.Component<{}, AppState> {\n  \n  async componentDidMount() {\n    const rootStore = await setupRootStore();\n    this.setState({\n      userState: {},\n      themeDark: true,\n      rootStore\n    });\n    rootStore.environment.api.auth.onAuthStateChanged(this.authStateChange, this.authStateChangeError);\n  }\n\n  authStateChange = (val) => {\n    if(val && val.email) {\n      this.setState({\n        userState: {\n          email: val.email\n        }\n      });\n    } else {\n      this.setState({\n        userState: {\n          email: \"not logged in\"\n        }\n      });\n    }\n  }\n\n  authStateChangeError = (error) => {\n    console.log(error);\n  }\n\n  changeTheme = () => {\n    this.setState({themeDark: !this.state.themeDark});\n  }\n  \n  render() {\n    const rootStore = this.state && this.state.rootStore;\n\n    if(!rootStore) {\n      return (\n        <div>Initializing...</div>\n      );\n    }\n\n    const depositStore = rootStore.depositStore;\n\n    return (\n      <div className={ this.state.themeDark ? \"App Dark\" : \"App Light\" }>\n        <div className=\"App-inner\">\n          <RootComponent rootStore={rootStore} depositStore={depositStore} />\n        </div>\n        <Button variant=\"theme\" style={{position: 'fixed', bottom: '1rem', right: '1rem', padding: '0.6rem'}} onClick={this.changeTheme}>Change Theme</Button>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}