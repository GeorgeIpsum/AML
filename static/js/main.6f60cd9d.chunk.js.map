{"version":3,"sources":["models/deposit/deposit.ts","utilities/helpers.ts","models/deposit-list-store/deposit-list-store.ts","models/root-store/root-store.ts","models/environment.ts","utilities/storage.ts","services/api/api-problem.ts","services/api/api-config.ts","services/api/api.ts","services/deposit-api/deposit-api.ts","app/setup-root-store.ts","components/deposit-form/deposit-form.tsx","components/deposit-list-item/deposit-list-item.tsx","components/root-component/root-component.tsx","app/App.tsx","serviceWorker.js","index.tsx"],"names":["DepositStatus","DepositModel","types","model","props","id","optional","identifier","value","string","status","enumeration","Object","values","unprocessed","dateAdded","Date","dateEdited","hash","actions","self","setId","setValue","setStatus","_objectAssign$1","assign","target","TypeError","prop","obj","output","idx","length","arguments","source","nextKey","prototype","hasOwnProperty","call","_isPlaceholder","a","_curry1","fn","f1","apply","this","_isArray","Array","isArray","val","toString","_isArrayLike","x","_isString","nodeType","recursive","DepositStoreStatus","UUIDGenerator","replace","c","crypto","getRandomValues","Uint8Array","isNil","list","concat","flatt","jlen","j","result","ilen","DepositListStoreModel","idle","deposits","array","setDeposits","clear","addDeposit","deposit","create","changeDeposit","index","views","getEnv","getRoot","slice","sort","d1","d2","getTime","loadDeposits","flow","pending","environment","depositApi","getDeposits","kind","done","error","RootStoreModel","depositStore","user","signIn","email","password","api","signInUser","Environment","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","load","key","VALUE","localStorage","getItem","JSON","parse","save","setItem","stringify","getGeneralApiProblem","response","problem","temporary","DEFAULT_API_CONFIG","url","timeout","Api","config","apisauce","auth","createUser","createUserWithEmailAndPassword","then","rsn","signInWithEmailAndPassword","signOutUser","signOut","baseURL","headers","app","initializeApp","username","get","ok","resultUser","DepositApi","Accept","e","console","message","completed","params","data","ROOT_STATE_STORAGE_KEY","setupRootStore","createEnvironment","env","storage","rootStore","onSnapshot","snapshot","setup","DepositForm","observer","onFormSubmit","event","preventDefault","state","formInput","onSubmit","setState","onInputChange","clearForm","parseInput","input","parsedInput","place","time","search","split","className","type","onChange","onClick","size","React","Component","DepositListItem","onCheckChange","checked","changeStatus","style","textDecoration","textDecorationColor","date","toDateString","RootComponent","onDepositFormSubmit","onClear","onChangeStatus","depositIndex","findIndex","d","actedUpon","changeShown","hide","test","chronoView","map","App","authStateChange","log","userState","authStateChangeError","changeTheme","themeDark","onAuthStateChanged","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6KAEYA,E,yIAAAA,K,0BAAAA,E,kBAAAA,E,sBAAAA,E,wBAAAA,E,uBAAAA,E,oBAAAA,E,sBAAAA,E,mCAAAA,M,KAWL,IAAMC,EAAeC,IAAMC,MAAM,WACrCC,MAAM,CACLC,GAAIH,IAAMI,SAASJ,IAAMK,WAAY,wCACrCC,MAAON,IAAMO,OACbC,OAAQR,IAAMI,SAASJ,IAAMS,YAA2B,gBAAiBC,OAAOC,OAAOb,IAAiBA,EAAcc,aACtHC,UAAWb,IAAMI,SAASJ,IAAMc,KAAM,IAAIA,MAC1CC,WAAYf,IAAMI,SAASJ,IAAMc,KAAM,IAAIA,MAC3CE,KAAMhB,IAAMI,SAASJ,IAAMO,OAAQ,MAEpCU,QAAQ,SAAAC,GAAI,MAAK,CAChBC,MADgB,SACVb,GACJY,EAAKf,GAAKG,GAEZc,SAJgB,SAIPd,GACPY,EAAKZ,MAAQA,EACbY,EAAKH,WAAa,IAAID,MAExBO,UARgB,SAQNf,GACRY,EAAKV,OAASF,EACdY,EAAKH,WAAa,IAAID,S,OCL5B,IAAMQ,EAA2C,oBAAlBZ,OAAOa,OAAwBb,OAAOa,OArBrE,SAAuBC,GACrB,GAAa,MAAVA,EACD,MAAM,IAAIC,UAAU,8CAKtB,IAHA,IARmBC,EAAMC,EAQrBC,EAASlB,OAAOc,GAChBK,EAAM,EACNC,EAASC,UAAUD,OACjBD,EAAMC,GAAQ,CAClB,IAAIE,EAASD,UAAUF,GACvB,GAAa,MAAVG,EACD,IAAI,IAAIC,KAAWD,EAdJN,EAeLO,EAfWN,EAeFK,EAdhBtB,OAAOwB,UAAUC,eAAeC,KAAKT,EAAKD,KAezCE,EAAOK,GAAWD,EAAOC,IAI/BJ,GAAO,EAET,OAAOD,GAKT,SAASS,EAAeC,GACtB,OAAY,MAALA,GACQ,kBAANA,IAC2B,IAAlCA,EAAE,4BAGN,SAASC,EAAQC,GACf,OAAO,SAASC,EAAGH,GACjB,OAAwB,IAArBP,UAAUD,QAAgBO,EAAeC,GACnCG,EAEAD,EAAGE,MAAMC,KAAMZ,YAK5B,IAAMa,EAAWC,MAAMC,SAAW,SAAkBC,GAClD,OAAe,MAAPA,GACAA,EAAIjB,QAAU,GAC0B,mBAAxCpB,OAAOwB,UAAUc,SAASZ,KAAKW,IAOzC,IAAME,EAAeV,EAAQ,SAAsBW,GACjD,QAAGN,EAASM,MACPA,IACW,kBAANA,KAPZ,SAAmBA,GACjB,MAA6C,oBAAtCxC,OAAOwB,UAAUc,SAASZ,KAAKc,GAOnCC,CAAUD,KACK,IAAfA,EAAEE,WAA2BF,EAAEpB,OAClB,IAAboB,EAAEpB,QACFoB,EAAEpB,OAAS,IAAYoB,EAAEf,eAAe,IAAMe,EAAEf,eAAee,EAAEpB,OAAS,SA+CxE,IA3CYuB,EC1DPC,ED0NCC,EAAgB,WAE3B,OAAQ,CAAC,MAAQ,KAAO,KAAO,KAAO,MAAMC,QAAQ,SAAU,SAAAC,GAAC,OAC5DA,EAAKC,OAAOC,gBAAgB,IAAIC,WAAW,IAAI,GAAM,IAAOH,EAAI,GAAMT,SAAS,OAyBvEa,GAPWtB,EAAQ,SAAkBuB,GAEhD,OAAOxC,EAAgBoB,MAAM,KAAM,CAAC,IAAIqB,OAAOD,MAG1BvB,GA1LJc,GA0LsB,EAzLhC,SAASW,EAAMF,GAMpB,IALA,IAAIxD,EAAO2D,EAAMC,EACbC,EAAS,GACTtC,EAAM,EACNuC,EAAON,EAAKhC,OAEVD,EAAMuC,GAAM,CAChB,GAAGnB,EAAaa,EAAKjC,IAInB,IAFAqC,EAAI,EACJD,GAFA3D,EAAQ+C,EAAYW,EAAMF,EAAKjC,IAAQiC,EAAKjC,IAE/BC,OACPoC,EAAID,GAERE,EAAOA,EAAOrC,QAAUxB,EAAM4D,GAC9BA,GAAK,OAIPC,EAAOA,EAAOrC,QAAUgC,EAAKjC,GAE/BA,GAAO,EAET,OAAOsC,KAqKU5B,EAAQ,SAAeW,GAAK,OAAY,MAALA,K,kBCtP5CI,K,YAAAA,E,kBAAAA,E,YAAAA,E,eAAAA,M,KAOL,IAAMe,EAAwBrE,IAAMC,MAAM,oBAC9CC,MAAM,CACLM,OAAQR,IAAMI,SAASJ,IAAMS,YAAgC,qBAAsBC,OAAOC,OAAO2C,IAAsBA,EAAmBgB,MAC1IC,SAAUvE,IAAMI,SAASJ,IAAMwE,MAAMzE,GAAe,MAErDkB,QAAQ,SAAAC,GAAI,MAAK,CAChBG,UADgB,SACNf,GACRY,EAAKV,OAASF,GAEhBmE,YAJgB,SAIJnE,GACPY,EAAKqD,SACHjE,EACDY,EAAKqD,SAASf,QAAQlD,GAEtBY,EAAKqD,SAASG,QAGhBxD,EAAKqD,SAAWjE,GAGpBqE,WAfgB,WAeuE,IAAD,yDAAzD,CAACrE,MAAO,GAAIE,OAAQV,EAAcc,aAAnDN,EAA0E,EAA1EA,MAAOE,EAAmE,EAAnEA,OACjB,GAAGU,EAAKqD,SAAU,CAChB,IAAMK,EAAmB7E,EAAa8E,OAAO,CAC3C1E,GAAIoD,IACJjD,MAAOA,EACPE,OAAQA,EACRK,UAAW,IAAIC,KACfC,WAAY,IAAID,KAChBE,KAAMA,EAAK,CAACV,MAAOA,EAAOE,OAAQA,EAAQK,UAAW,IAAIC,SAErDyD,EAAQ,sBAAOrD,EAAKqD,UAAa,CAACK,IAExC,OADA1D,EAAKqD,SAASf,QAAQe,IACf,EAEP,OAAO,GAGXO,cAhCgB,SAgCFC,EAhCE,GAgCuB,IAAjBzE,EAAgB,EAAhBA,MAAOE,EAAS,EAATA,OACxBU,EAAKqD,UAAYrD,EAAKqD,SAASQ,KAC7BzE,GACDY,EAAKqD,SAASQ,GAAO3D,SAASd,GAE7BE,GACDU,EAAKqD,SAASQ,GAAO1D,UAAUb,QAKtCwE,MAAM,SAAA9D,GAAI,MAAK,CACd,kBACE,OAAO+D,YAAO/D,IAEhB,gBACE,OAAOgE,YAAQhE,IAEjB,gBACE,MAAuB,YAAhBA,EAAKV,QAEd,iBACE,OAAOU,EAAKqD,SAASY,QAAQC,KAAK,SAACC,EAAIC,GACrC,OAAOD,EAAGxE,UAAU0E,UAAYD,EAAGzE,UAAU0E,UAAY,GAAK,QAInEtE,QAAQ,SAAAC,GAAI,MAAK,CAChBsE,aAAcC,YAAI,SAAC,mFAGA,OAFjBvE,EAAKG,UAAUiC,EAAmBoC,SADjB,kBAGMxE,EAAKyE,YAAYC,WAAWC,cAHlC,OAMI,QAHb1B,EAHS,QAML2B,MAER5E,EAAKuD,YAAYN,EAAOI,UACxBrD,EAAKG,UAAUiC,EAAmByC,OAElC7E,EAAKG,UAAUiC,EAAmB0C,OAXrB,gDAcf9E,EAAKG,UAAUiC,EAAmB0C,OAdnB,0DCxEVC,EAAiBjG,IAAMC,MAAM,aACvCC,MAAM,CAELgG,aAAclG,IAAMI,SAASiE,EAAuB,IACpD8B,KAAMnG,IAAMI,SAASJ,IAAMO,OAAQ,MAEpCyE,MAAM,SAAA9D,GAAI,MAAK,CACd,kBACE,OAAO+D,YAAO/D,OAGjBD,QAAQ,SAAAC,GAAI,MAAK,CAChBkF,OADgB,SACTC,EAAOC,GACZ,OAAOpF,EAAKyE,YAAYY,IAAIC,WAAWH,EAAOC,OClBvCG,EAAb,sCACEF,SADF,OAEEX,gBAFF,GAKac,EAAiB,CAC5BC,OAAQC,0CACRC,WAAYD,0BACZE,YAAaF,iCACbG,UAAWH,UACXI,cAAeJ,GACfK,kBAAmBL,eACnBM,MAAON,uCCeIO,EAAO,SAACC,GACnB,IAAMC,EAAQC,aAAaC,QAAQH,GACnC,MAAoB,kBAAVC,EACDG,KAAKC,MAAMJ,GACN,MASHK,EAAO,SAACN,EAAa9G,GAChC,IAME,MALoB,kBAAVA,EACRgH,aAAaK,QAAQP,EAAKI,KAAKI,UAAUtH,IAEzCgH,aAAaK,QAAQP,EAAK9G,IAErB,EACP,SACA,OAAO,I,QCPJ,SAASuH,EAAqBC,GACnC,OAAQA,EAASC,SACf,IAAK,mBAEL,IAAK,gBACH,MAAO,CAAEjC,KAAM,iBAAkBkC,WAAW,GAC9C,IAAK,gBACH,MAAO,CAAElC,KAAM,UAAWkC,WAAW,GACvC,IAAK,eACH,MAAO,CAAElC,KAAM,UACjB,IAAK,gBACH,MAAO,CAAEA,KAAM,UAAWkC,WAAW,GACvC,IAAK,eACH,OAAQF,EAAStH,QACf,KAAK,IACH,MAAO,CAAEsF,KAAM,gBACjB,KAAK,IACH,MAAO,CAAEA,KAAM,aACjB,QACE,MAAO,CAAEA,KAAM,YAErB,IAAK,eACH,OAAO,KAGX,OAAO,KC/DF,IAAMmC,EAAgC,CAC3CC,IAAK,yBACLC,QAAS,K,iBCFEC,EAAb,WAME,aAAqD,IAAD,OAAxCC,EAAwC,uDAApBJ,EAAoB,yBALpDK,cAKoD,OAJpDD,YAIoD,OAHpDE,UAGoD,OAFpDpC,UAEoD,OAqCpDqC,WAAa,SAACnC,EAAOC,GACnB,EAAKiC,KAAKE,+BAA+BpC,EAAOC,GAAUoC,KAAK,SAAC3F,GAC9D,EAAKoD,KAAOpD,EAAIoD,MACf,SAACwC,GACF,EAAKnC,WAAWH,EAAOC,MAzCyB,KA6CpDE,WAAa,SAACH,EAAOC,GAEnB,OADQ,EAAKiC,KAAKK,2BAA2BvC,EAAOC,IA9CF,KAmDpDuC,YAAc,kBAAM,EAAKN,KAAKO,WAlD5BnG,KAAK0F,OAASA,EACd1F,KAAKwD,KAAO,CACVE,MAAO,QATb,oDAcI1D,KAAK2F,SAAWzD,iBAAO,CACrBkE,QAASpG,KAAK0F,OAAOH,IACrBC,QAASxF,KAAK0F,OAAOF,QACrBa,QAAS,KAGXC,IAAIC,cAAcxC,GAElB/D,KAAK4F,KAAOU,IAAIV,SAtBpB,sEAyBgBY,GAzBhB,0FA0B6CxG,KAAK2F,SAASc,IAAd,iBAA4BD,IA1BzE,WA0BUrB,EA1BV,QA4BiBuB,GA5BjB,qBA6BYtB,EAAUF,EAAqBC,IA7B3C,yCA8ByBC,GA9BzB,uBAkCYuB,EAAyB,GAlCrC,kBAqCa,CAAExD,KAAM,KAAMK,KAAMmD,IArCjC,2DAuCa,CAAExD,KAAM,aAvCrB,sHCAayD,EAAb,WAKE,aAAqD,IAAzClB,EAAwC,uDAApBJ,EAAoB,yBAJpDK,cAIoD,OAFpDD,YAEoD,EAClD1F,KAAK0F,OAASA,EANlB,oDAUI,IACE1F,KAAK2F,SAAWzD,iBAAO,CACrBkE,QAASpG,KAAK0F,OAAOH,IACrBC,QAASxF,KAAK0F,OAAOF,QACrBa,QAAS,CACPQ,OAAQ,sBAGZ,MAAMC,GACNC,QAAQ1D,MAAMyD,EAAEE,YAnBtB,0EAuBoBC,GAvBpB,mFAwBUC,EAAShG,EAAM+F,GAAa,GAAK,CAAEA,aAxB7C,SAyB6CjH,KAAK2F,SAASc,IAAd,YAA+BS,GAzB5E,WAyBU/B,EAzBV,QA2BiBuB,GA3BjB,qBA4BYtB,EAAUF,EAAqBC,IA5B3C,yCA6ByBC,GA7BzB,uBAiCYxD,EAA8BuD,EAASgC,KAjCnD,kBAkCa,CAAEhE,KAAM,KAAMvB,aAlC3B,2DAoCa,CAAEuB,KAAM,aApCrB,sHCAMiE,EAAyB,MAExB,SAAeC,IAAtB,+B,2CAAO,gCAAA1H,EAAA,qEAIa2H,IAJb,cAICC,EAJD,yBAMWC,EAAaJ,GANxB,gDAMoD,GANpD,OAMHD,EANG,KAOHM,EAAYnE,EAAepB,OAAOiF,EAAMI,GAPrC,kDASHE,EAAYnE,EAAepB,OAAO,GAAIqF,GATnC,eAYLG,YAAWD,EAAW,SAAAE,GAAQ,OAAIH,EAAaJ,EAAwBO,KAZlE,kBAcEF,GAdF,yD,sBAiBA,SAAeH,IAAtB,+B,2CAAO,4BAAA3H,EAAA,4DACC4H,EAAM,IAAIzD,GAEZF,IAAM,IAAI6B,EACd8B,EAAItE,WAAa,IAAI2D,EAJhB,SAMCW,EAAI3D,IAAIgE,QANT,uBAOCL,EAAItE,WAAW2E,QAPhB,gCASEL,GATF,0C,iECZcM,EADpBC,Y,cAEC,WAAYvK,GAAQ,IAAD,8BACjB,4CAAMA,KAORwK,aAAe,SAACC,GACdA,EAAMC,iBACsB,KAAzB,EAAKC,MAAMC,WACZ,EAAK5K,MAAM6K,SAAS,EAAKF,MAAMC,WAEjC,EAAKE,SAAS,CACZF,UAAW,MAdI,EAkBnBG,cAAgB,SAACN,GACf,EAAKK,SAAS,CACZF,UAAWH,EAAMnJ,OAAOlB,SApBT,EAwBnB4K,UAAY,SAACP,GACX,EAAKK,SAAS,CACZF,UAAW,MA1BI,EA8BnBK,WAAa,SAACC,GACZ,IAAMC,EAAc,CAClBD,QACAE,MAAO,GACPC,KAAM,IAER,GAAGH,EAAMI,OAAO,KAAM,CACpB,IAAIC,EAAQL,EAAMK,MAAM,KACrBA,EAAM,KACPJ,EAAYC,MAAQG,EAAM,GACvBA,EAAM,GACPJ,EAAYD,MAAQK,EAAM,GAAK,GAAKA,EAAM,GAE1CJ,EAAYD,MAAQK,EAAM,IAKhC,OAAOJ,GA7CP,EAAKR,MAAQ,CACXC,UAAW,IAJI,E,sEAoDjB,IAAMO,EAAc1I,KAAKwI,WAAWxI,KAAKkI,MAAMC,WAC/C,OACE,yBAAKY,UAAU,gBACb,0BAAMX,SAAUpI,KAAK+H,aAAcgB,UAAU,qBAC3C,2BAAOC,KAAK,OAAOrL,MAAOqC,KAAKkI,MAAMC,UAAWc,SAAUjJ,KAAKsI,cAAgBS,UAAU,uBACzF,yBAAKA,UAAU,iBACf,2BAAOC,KAAK,SAASD,UAAU,wBAAwBpL,MAAM,QACnC,KAAzBqC,KAAKkI,MAAMC,UACP,4BAAQa,KAAK,SAASD,UAAU,uBAAuBG,QAASlJ,KAAKuI,WAAW,kBAAC,IAAD,CAAGY,KAAM,MAC1F,MAGN,yBAAKJ,UAAU,gBACb,yBAAKA,UAAU,cAAcL,EAAYD,OAClB,KAAtBC,EAAYC,OAAiB,yBAAKI,UAAU,eAAc,yCAA7B,IAAmDL,EAAYC,a,GAnE9DS,IAAMC,a,ECA1BC,I,mBACpB,WAAY/L,GAAQ,IAAD,8BAClB,4CAAMA,KAOPgM,cAAgB,SAACvB,GAChB,EAAKK,SAAS,CACbmB,SAAU,EAAKtB,MAAMsB,UAEtB,EAAKjM,MAAMkM,aAAazB,EAAO,EAAKzK,MAAMc,OAT1C,EAAK6J,MAAQ,CACZsB,QAAS,EAAKjM,MAAMM,QAJH,E,sEAgBlB,OACC,yBAAKkL,UAAU,qBACd,yBAAKA,UAAU,iBACd,2BAAOC,KAAK,WAAWQ,QAASxJ,KAAKkI,MAAMsB,QAASP,SAAUjJ,KAAKuJ,iBAEpE,yBAAKR,UAAU,iBACd,yBAAKA,UAAU,QAAQW,MAAO,CAACC,eAAgB3J,KAAKkI,MAAMsB,QAAU,eAAiB,OAAQI,oBAAqB,0BAA2B5J,KAAKzC,MAAMI,OACxJ,yBAAKoL,UAAU,QAAQ/I,KAAKzC,MAAMsM,KAAKC,sB,GAxBCV,IAAMC,YCC9BU,GADpBjC,Y,cAEC,WAAYvK,GAAQ,IAAD,8BACjB,4CAAMA,KAKRyM,oBAAsB,SAACrM,GACrB,IAAMsE,EAAU,CACdtE,QACAE,OAAQV,EAAcc,aAExB,EAAKV,MAAMgG,aAAavB,WAAWC,IAXlB,EAcnBgI,QAAU,SAACjC,GACT,EAAKzK,MAAMgG,aAAazB,YAAY,OAfnB,EAkBnBoI,eAAiB,SAAClC,EAAO3J,GACvB,IAAM8L,EAAe,EAAK5M,MAAMgG,aAAa3B,SAASwI,UAAU,SAACC,GAAD,OAAOA,EAAEhM,OAASA,IAClF,EAAKd,MAAMgG,aAAapB,cAAcgI,EAAc,CAACtM,OAAQ,EAAKN,MAAMgG,aAAa3B,SAASuI,GAActM,SAAWV,EAAcc,YAAcd,EAAcmN,UAAYnN,EAAcc,eApB1K,EAuBnBsM,YAAc,WACZ,EAAKlC,SAAS,CAACmC,MAAO,EAAKtC,MAAMsC,QArBjC,EAAKtC,MAAQ,CAACvK,MAAO,GAAI8M,KAAM,GAAID,MAAM,GAHxB,E,sEA2BT,IAAD,OACD5I,EAAW5B,KAAKzC,MAAMgG,aAAamH,WAAWC,IAAI,SAACN,GACvD,OAAI,EAAKnC,MAAMsC,KAOL,kBAAC,GAAD,CAAiB/F,IAAK4F,EAAEhM,KAAMA,KAAMgM,EAAEhM,KAAMV,MAAO0M,EAAE1M,MAAOE,OAAQwM,EAAExM,SAAWV,EAAcc,YAAa4L,KAAMQ,EAAEnM,UAAWuL,aAAc,EAAKS,iBANvJG,EAAExM,SAASV,EAAcc,YAClB,kBAAC,GAAD,CAAiBwG,IAAK4F,EAAEhM,KAAMA,KAAMgM,EAAEhM,KAAMV,MAAO0M,EAAE1M,MAAOE,OAAQwM,EAAExM,SAAWV,EAAcc,YAAa4L,KAAMQ,EAAEnM,UAAWuL,aAAc,EAAKS,iBAEnJ,OAOb,OACE,yBAAKnB,UAAU,QACb,kBAAC,EAAD,CAAaX,SAAUpI,KAAKgK,sBAC1BpI,EACF,4BAAQoH,KAAK,SAASE,QAASlJ,KAAKiK,SAApC,kBACA,4BAAQjB,KAAK,SAASE,QAASlJ,KAAKuK,aAAevK,KAAKkI,MAAMsC,KAAO,gBAAkB,sB,GA9CpDpB,IAAMC,a,ECD5BuB,GADpB9C,Y,6MAaC+C,gBAAkB,SAACzK,GACdA,GAAOA,EAAIsD,OACZtD,EAAIsD,OAASqD,QAAQ+D,IAAI,aAAc1K,EAAIsD,OAC3C,EAAK2E,SAAS,CACZ0C,UAAW,CACTrH,MAAOtD,EAAIsD,UAIf,EAAK2E,SAAS,CACZ0C,UAAW,CACTrH,MAAO,oB,EAMfsH,qBAAuB,SAAC3H,GACtB0D,QAAQ+D,IAAIzH,I,EAGd4H,YAAc,WACZ,EAAK5C,SAAS,CAAC6C,WAAY,EAAKhD,MAAMgD,a,iNA/Bd7D,I,OAAlBI,E,OACNzH,KAAKqI,SAAS,CACZ0C,UAAW,GACXG,WAAW,EACXzD,cAEFA,EAAUzE,YAAYY,IAAIgC,KAAKuF,mBAAmBnL,KAAK6K,gBAAiB7K,KAAKgL,sB,mIA6B7E,IAAMvD,EAAYzH,KAAKkI,OAASlI,KAAKkI,MAAMT,UACrC/D,EAAQ1D,KAAKkI,OAASlI,KAAKkI,MAAM6C,WAAa/K,KAAKkI,MAAM6C,UAAUrH,MAEzE,IAAI+D,EACF,OACE,gDAIJ,IAAMlE,EAAekE,EAAUlE,aAE/B,OACE,yBAAKwF,UAAY/I,KAAKkI,MAAMgD,UAAY,WAAa,aACnD,yBAAKnC,UAAU,aACXrF,GAAgB,aAClB,kBAAC,GAAD,CAAe+D,UAAWA,EAAWlE,aAAcA,KAErD,4BAAQyF,KAAK,SAASD,UAAU,eAAeG,QAASlJ,KAAKiL,aAA7D,qB,GAvDyB7B,IAAMC,a,ECFnB+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhG,KAAK,SAAAiG,GACjCA,EAAaC,gB","file":"static/js/main.6f60cd9d.chunk.js","sourcesContent":["import { types } from 'mobx-state-tree';\n\nexport enum DepositStatus {\n  unprocessed = \"unprocessed\",\n  trashed = \"trashed\",\n  incubated = \"incubated\",\n  referenced = \"referenced\",\n  actedUpon = \"acted upon\",\n  deferred = \"deferred\",\n  delegated = \"delegated\",\n  addedToProject = \"added to project\"\n};\n\nexport const DepositModel = types.model(\"Deposit\")\n  .props({\n    id: types.optional(types.identifier, 'xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx'),\n    value: types.string,\n    status: types.optional(types.enumeration<DepositStatus>(\"DepositStatus\", Object.values(DepositStatus)), DepositStatus.unprocessed),\n    dateAdded: types.optional(types.Date, new Date()),\n    dateEdited: types.optional(types.Date, new Date()),\n    hash: types.optional(types.string, '')\n  })\n  .actions(self => ({\n    setId(value: string) {\n      self.id = value;\n    },\n    setValue(value: string) {\n      self.value = value;\n      self.dateEdited = new Date();\n    },\n    setStatus(value: DepositStatus) {\n      self.status = value;\n      self.dateEdited = new Date();\n    }\n  }));\n\ntype DepositType = typeof DepositModel.Type;\nexport interface Deposit extends DepositType {};\n\ntype DepositSnapshotType = typeof DepositModel.SnapshotType;\nexport interface DepositSnapshot extends DepositSnapshotType {};","//helpers.ts utility\n\nexport function _has(prop, obj): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction _objectAssign(target) {\n  if(target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n  let output = Object(target);\n  let idx = 1;\n  let length = arguments.length;\n  while(idx < length) {\n    var source = arguments[idx];\n    if(source != null) {\n      for(var nextKey in source) {\n        if(_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n}\n\nconst _objectAssign$1 = typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n\nfunction _isPlaceholder(a) {\n  return a != null &&\n    typeof a === 'object' &&\n    a['@@functional/placeholder'] === true;\n}\n\nfunction _curry1(fn) {\n  return function f1(a) {\n    if(arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}\n\nconst _isArray = Array.isArray || function _isArray(val) {\n  return (val != null &&\n          val.length >= 0 &&\n          Object.prototype.toString.call(val) === '[object Array]');\n};\n\nfunction _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}\n\nconst _isArrayLike = _curry1(function _isArrayLike(x) {\n  if(_isArray(x)) { return true; }\n  if (!x) { return false; }\n  if(typeof x !== 'object') { return false; }\n  if(_isString(x)) { return false; }\n  if(x.nodeType === 1) { return !!x.length; }\n  if(x.length === 0) { return true; }\n  if(x.length > 0) { return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1); }\n  return false;\n});\n\nfunction _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while(idx < ilen) {\n      if(_isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while(j < jlen) {\n          //@ts-ignore\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        //@ts-ignore\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n}\n\n\n/**\n * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n * HERE BE THE EXPORTED FUNCTIONS\n * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n */\n\n \n/**\n * Adds a key value/ index value pair to an object, return original object if key or index already exists\n * \n * @param obj the object\n * @param key key value to be added\n * @param value value at said key value to be added\n * @param index index to use\n */\nexport const addToObject = (obj: Object, key: string, value: any, index: number): Object => {\n  let temp = {};\n  let i = 0;\n\n  for(var prop in obj) {\n    if(obj.hasOwnProperty(prop)) {\n      if(i===index&&key&&value) {\n        temp[key] = value;\n      }\n      temp[prop] = obj[prop];\n      i++;\n    }\n  }\n  if(!index&&key&&value) {\n    temp[key] = value;\n  }\n  return temp;\n}\n\n/**\n * Debounce function\n * \n * @param fn the function to debounce\n */\nexport const debounce = (fn) => {\n  let timeout;\n\n  return function() {\n    let context = this;\n    let args = arguments;\n\n    if(timeout) {\n      window.cancelAnimationFrame(timeout);\n    }\n\n    timeout = window.requestAnimationFrame(function() {\n      fn.apply(context, args);\n    });\n  }\n}\n\n/**\n * Delay function call for some x milliseconds\n * \n * @param ms milliseconds to delay\n */\nexport const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Shuffles an array\n * \n * @param array the array to shuffle\n */\nexport const shuffle = (array: any[]): any[] => {\n  let currentIndex = array.length;\n  let temporaryValue, randomIndex;\n\n  while(0!==currentIndex) {\n    randomIndex = Math.floor(Math.random()*currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  \n  return array;\n}\n\n/**\n * Chooses a random item from an array\n * \n * @param array ...the array\n */\nexport const chooseRandomItem = (array: any[]): any => {\n  return array[Math.floor(Math.random()*array.length)];\n}\n\n/**\n * Converts an array into a CSV string\n * \n * @param array array to convert\n * @param delimiter delimiter to use between values. defaults to ','\n */\nexport const arrayToCsv = (array: any, delimiter: string = ','): string => {\n  return array.map(v => v.map(x => (isNaN(x) ? `\"${x.replace(/\"/g, '\"\"')}\"` : x)).join(delimiter)).join('\\n');\n}\n\n/**\n * Returns intersection of 2 arrays\n * \n * @param a first array\n * @param b second array\n */\nexport const intersection = (a: any[], b: any[]) => {\n  const s = new Set(b);\n  return a.filter(x => s.has(x));\n}\n\n/**\n * Generate a hash for an object\n * \n * @param object object to generate hash for\n * @param key \n */\nexport const toHash = (object: Object, key: string) => {\n  return Array.prototype.reduce.call(\n    object,\n    // eslint-disable-next-line\n    (acc: any, data, index) => ((acc[!key ? index : data[key]] = data), acc),\n    {}\n  );\n}\n\n/**\n * Generates a UUID in a browser\n */\nexport const UUIDGenerator = () => {\n  //@ts-ignore\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n    (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)\n  );\n}\n\n/**\n * Get size of object, array, or string\n * \n * @param val array, object, or string to measure size of\n */\nexport const size = (val: any): number =>\n  Array.isArray(val)\n    ? val.length\n    : val && typeof val === 'object'\n    ? val.size || val.length || Object.keys(val).length\n    : typeof val === 'string'\n    ? new Blob([val]).size\n    : 0;\n\nexport const mergeAll = _curry1(function mergeAll(list) {\n  //@ts-ignore\n  return _objectAssign$1.apply(null, [{}].concat(list));\n});\n\nexport const flatten = _curry1(_makeFlat(true));\n\nexport const isNil = _curry1(function isNil(x) { return x == null; });\n\n","import { types, getEnv, getRoot } from 'mobx-state-tree';\nimport { DepositModel, Deposit, DepositSnapshot, DepositStatus } from '../deposit';\n//import { RootStore } from '../root-store';\nimport { Environment } from '../environment';\nimport { flow } from 'mobx';\nimport { UUIDGenerator } from '../../utilities/helpers';\nimport * as hash from 'object-hash';\n\nexport enum DepositStoreStatus {\n  idle = \"idle\",\n  pending = \"pending\",\n  done = \"done\",\n  error = \"error\"\n};\n\nexport const DepositListStoreModel = types.model(\"DepositListStore\")\n  .props({\n    status: types.optional(types.enumeration<DepositStoreStatus>(\"DepositStoreStatus\", Object.values(DepositStoreStatus)), DepositStoreStatus.idle),\n    deposits: types.optional(types.array(DepositModel), [])\n  })\n  .actions(self => ({ //all setters go here\n    setStatus(value: DepositStoreStatus) {\n      self.status = value;\n    },\n    setDeposits(value: Deposit[] | DepositSnapshot[] | null) {\n      if(self.deposits) {\n        if(value) {\n          self.deposits.replace(value as any);\n        } else {\n          self.deposits.clear();\n        }\n      } else {\n        self.deposits = value as any;\n      }\n    },\n    addDeposit({value, status} = {value: '', status: DepositStatus.unprocessed}): boolean {\n      if(self.deposits) {\n        const deposit: Deposit = DepositModel.create({\n          id: UUIDGenerator(),\n          value: value,\n          status: status,\n          dateAdded: new Date(),\n          dateEdited: new Date(),\n          hash: hash({value: value, status: status, dateAdded: new Date()})\n        });\n        const deposits = [...self.deposits, ...[deposit]];\n        self.deposits.replace(deposits as any);\n        return true;\n      } else {\n        return false;\n      }\n    },\n    changeDeposit(index, {value, status}) {\n      if(self.deposits && self.deposits[index]) {\n        if(value) {\n          self.deposits[index].setValue(value);\n        }\n        if(status) {\n          self.deposits[index].setStatus(status);\n        }\n      }\n    }\n  }))\n  .views(self => ({\n    get environment() {\n      return getEnv(self) as Environment;\n    },\n    get rootStore() {\n      return getRoot(self) as any; //returning this as RootStore results in ts calling a circular reference\n    },\n    get isLoading() {\n      return self.status === \"pending\";\n    },\n    get chronoView() {\n      return self.deposits.slice().sort((d1, d2) => {\n        return d1.dateAdded.getTime() < d2.dateAdded.getTime() ? 1 : -1;\n      });\n    }\n  }))\n  .actions(self => ({\n    loadDeposits: flow(function*() {\n      self.setStatus(DepositStoreStatus.pending);\n      try { \n        const result = yield self.environment.depositApi.getDeposits();\n\n        //@ts-ignore\n        if(result.kind === \"ok\") {\n          //@ts-ignore\n          self.setDeposits(result.deposits);\n          self.setStatus(DepositStoreStatus.done);\n        } else {\n          self.setStatus(DepositStoreStatus.error);\n        }\n      } catch {\n        self.setStatus(DepositStoreStatus.error);\n      }\n    }),\n  }));\n\ntype DepositStoreType = typeof DepositListStoreModel.Type;\nexport interface DepositStore extends DepositStoreType {};","import { types, getEnv } from 'mobx-state-tree';\n//add other store model imports here here\nimport { DepositListStoreModel } from '../deposit-list-store';\nimport { Environment } from '../environment';\n\n/**\n * The RootStore model\n */\nexport const RootStoreModel = types.model(\"RootStore\")\n  .props({\n    //add other stores here in format: someStore: types.optional(SomeStoreModel, {})\n    depositStore: types.optional(DepositListStoreModel, {}),\n    user: types.optional(types.string, '')\n  })\n  .views(self => ({\n    get environment() {\n      return getEnv(self) as Environment;\n    }\n  }))\n  .actions(self => ({\n    signIn(email, password) {\n      return self.environment.api.signInUser(email, password);\n    },\n  }));\n\n/**\n * The RootStore instance\n */\nexport type RootStore = typeof RootStoreModel.Type;\n\n\n/**\n * The RootStore data\n */\nexport type RootStoreSnapshot = typeof RootStoreModel.SnapshotType;","import { Api } from '../services/api';\nimport { DepositApi } from '../services/deposit-api';\n\nexport class Environment {\n  api: Api;\n  depositApi: DepositApi;\n};\n\nexport const firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};","//storage.ts utility\n/**\n * Loads string from localStorage.\n * \n * @param key The key to fetch\n */\nexport const loadString = (key: string): string | null => {\n  return localStorage.getItem(key);\n}\n\n/**\n * Saves a string value to localStorage.\n * \n * @param key The key to save to\n * @param value The string to save\n */\nexport const saveString = (key: string, value: string): boolean => {\n  try {\n    localStorage.setItem(key, value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Loads an object string from localStorage and returns the object.\n * \n * @param key The key to fetch\n */\nexport const load = (key: string): any | null => {\n  const VALUE = localStorage.getItem(key);\n  if(typeof VALUE === 'string') {\n    return JSON.parse(VALUE);\n  } else return null;\n}\n\n/**\n * Saves objects and all other values to localStorage.\n * \n * @param key The key to save to\n * @param value The value (can be an object) to save\n */\nexport const save = (key: string, value: any): boolean => {\n  try {\n    if(typeof value === 'object') {\n      localStorage.setItem(key, JSON.stringify(value));\n    } else {\n      localStorage.setItem(key, value);\n    }\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Removes a key-value pair from localStorage.\n * \n * @param key The key to remove\n */\nexport const remove = (key: string): boolean => {\n  try {\n    localStorage.removeItem(key);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Clears all localStorage.\n */\nexport const clear = (): boolean => {\n  try {\n    localStorage.clear();\n    return true;\n  } catch {\n    return false;\n  }\n}","import { ApiResponse } from 'apisauce';\n\nexport type GeneralApiProblem = \n  /**\n   * Times up.\n   */\n  | { kind: \"timeout\"; temporary: true }\n  /**\n   * Cannot connect to the server for some reason.\n   */\n  | { kind: \"cannot-connect\"; temporary: true }\n  /**\n   * The server experienced a problem. Any 5xx error.\n   */\n  | { kind: \"server\" }\n  /**\n   * We're not allowed because we haven't identified ourself. This is 401.\n   */\n  | { kind: \"unauthorized\" }\n  /**\n   * We don't have access to perform that request. This is 403.\n   */\n  | { kind: \"forbidden\" }\n  /**\n   * Unable to find that resource.  This is a 404.\n   */\n  | { kind: \"not-found\" }\n  /**\n   * All other 4xx series errors.\n   */\n  | { kind: \"rejected\" }\n  /**\n   * Something truly unexpected happened. Most likely can try again. This is a catch all.\n   */\n  | { kind: \"unknown\"; temporary: true }\n  /**\n   * The data we received is not in the expected format.\n   */\n  | { kind: \"bad-data\" }\n\n/**\n * Attempts to get a common cause of problems from an api response.\n *\n * @param response The api response.\n */\nexport function getGeneralApiProblem(response: ApiResponse<any>): GeneralApiProblem | void | null {\n  switch (response.problem) {\n    case \"CONNECTION_ERROR\":\n      return { kind: \"cannot-connect\", temporary: true };\n    case \"NETWORK_ERROR\":\n      return { kind: \"cannot-connect\", temporary: true };\n    case \"TIMEOUT_ERROR\":\n      return { kind: \"timeout\", temporary: true };\n    case \"SERVER_ERROR\":\n      return { kind: \"server\" };\n    case \"UNKNOWN_ERROR\":\n      return { kind: \"unknown\", temporary: true };\n    case \"CLIENT_ERROR\":\n      switch (response.status) {\n        case 401:\n          return { kind: \"unauthorized\" };\n        case 403:\n          return { kind: \"forbidden\" };\n        default:\n          return { kind: \"rejected\" };\n      }\n    case \"CANCEL_ERROR\":\n      return null;\n  }\n\n  return null;\n}","\n\nexport interface ApiConfig {\n  url: string,\n  timeout: number,\n}\n\nexport const DEFAULT_API_CONFIG: ApiConfig = {\n  url: \"https://api.github.com\",\n  timeout: 1000,\n}","import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport { getGeneralApiProblem } from './api-problem';\nimport { ApiConfig, DEFAULT_API_CONFIG } from './api-config';\nimport * as Types from './api.types';\nimport app from 'firebase';\nimport { firebaseConfig } from '../../models/environment';\n\nexport class Api {\n  apisauce: ApisauceInstance;\n  config: ApiConfig;\n  auth: app.auth.Auth;\n  user: app.User | null | any;\n\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\n    this.config = config;\n    this.user = {\n      email: 'test'\n    };\n  }\n\n  setup() {\n    this.apisauce = create({\n      baseURL: this.config.url,\n      timeout: this.config.timeout,\n      headers: {},\n    });\n\n    app.initializeApp(firebaseConfig);\n\n    this.auth = app.auth();\n  }\n\n  async getUser(username: string): Promise<Types.GetUserResult> {\n    const response: ApiResponse<any> = await this.apisauce.get(`/users/${username}`);\n\n    if(!response.ok) {\n      const problem = getGeneralApiProblem(response);\n      if(problem) return problem;\n    }\n\n    try {\n      const resultUser: Types.User = {\n\n      }\n      return { kind: \"ok\", user: resultUser };\n    } catch {\n      return { kind: \"bad-data\" };\n    }\n  }\n\n  createUser = (email, password) => {\n    this.auth.createUserWithEmailAndPassword(email, password).then((val) => {\n      this.user = val.user as app.User;\n    }, (rsn) => {\n      this.signInUser(email, password);\n    });\n  }\n\n  signInUser = (email, password): Promise<app.auth.UserCredential> => {\n    let a = this.auth.signInWithEmailAndPassword(email, password);\n    return a;\n    // this.auth.signInWithEmailAndPassword(email, password).then((val) => { console.log('yesy',val); this.user = val.user; console.log(this.user); }, (rsn) => { console.log('no',rsn) });\n  }\n\n  signOutUser = () => this.auth.signOut();\n}","import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport { getGeneralApiProblem } from '../api/api-problem';\nimport { ApiConfig, DEFAULT_API_CONFIG } from '../api/api-config';\nimport * as Types from './deposit-api.types';\nimport { isNil } from '../../utilities/helpers';\nimport { DepositSnapshot } from '../../models/deposit';\n\nexport class DepositApi {\n  apisauce: ApisauceInstance;\n\n  config: ApiConfig;\n\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\n    this.config = config;\n  }\n\n  setup() {\n    try {\n      this.apisauce = create({\n        baseURL: this.config.url,\n        timeout: this.config.timeout,\n        headers: {\n          Accept: \"application/json\",\n        },\n      });\n    } catch(e) {\n      console.error(e.message);\n    }\n  }\n\n  async getDeposits(completed?: boolean): Promise<Types.GetDepositsResult> {\n    const params = isNil(completed) ? {} : { completed };\n    const response: ApiResponse<any> = await this.apisauce.get(`/deposits`, params);\n    \n    if(!response.ok) {\n      const problem = getGeneralApiProblem(response);\n      if(problem) return problem;\n    }\n\n    try {\n      const deposits: DepositSnapshot[] = response.data;\n      return { kind: \"ok\", deposits };\n    } catch {\n      return { kind: \"bad-data\" };\n    }\n  }\n}","import { onSnapshot } from 'mobx-state-tree';\nimport { RootStoreModel, RootStore } from '../models/root-store';\nimport { Environment } from '../models/environment';\nimport * as storage from '../utilities/storage';\nimport { Api } from '../services/api';\nimport { DepositApi } from '../services/deposit-api';\n\nconst ROOT_STATE_STORAGE_KEY = \"AML\";\n\nexport async function setupRootStore() {\n  let rootStore: RootStore;\n  let data: any;\n\n  const env = await createEnvironment();\n  try {\n    data = (await storage.load(ROOT_STATE_STORAGE_KEY)) || {};\n    rootStore = RootStoreModel.create(data, env);\n  } catch {\n    rootStore = RootStoreModel.create({}, env);\n  }\n\n  onSnapshot(rootStore, snapshot => storage.save(ROOT_STATE_STORAGE_KEY, snapshot));\n\n  return rootStore;\n}\n\nexport async function createEnvironment() {\n  const env = new Environment();\n\n  env.api = new Api();\n  env.depositApi = new DepositApi();\n\n  await env.api.setup();\n  await env.depositApi.setup();\n\n  return env;\n}","import React from 'react';\nimport { observer } from 'mobx-react';\nimport './deposit-form.scss';\nimport { X } from 'react-feather';\n\ninterface DepositFormProps {\n  onSubmit: any,\n};\n\ninterface DepositFormState {\n  formInput: string\n};\n\n@observer\nexport default class DepositForm extends React.Component<DepositFormProps, DepositFormState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formInput: ''\n    };\n  }\n  \n  onFormSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if(this.state.formInput !== '') {\n      this.props.onSubmit(this.state.formInput);\n    }\n    this.setState({\n      formInput: ''\n    });\n  }\n\n  onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      formInput: event.target.value\n    });\n  }\n\n  clearForm = (event) => {\n    this.setState({\n      formInput: ''\n    });\n  }\n\n  parseInput = (input: string) => {\n    const parsedInput = {\n      input,\n      place: '',\n      time: ''\n    };\n    if(input.search('@')) {\n      let split = input.split('@');\n      if(split[1]) {\n        parsedInput.place = split[1];\n        if(split[2]) {\n          parsedInput.input = split[0] + '' + split[2];\n        } else {\n          parsedInput.input = split[0];\n        }\n      }\n    }\n\n    return parsedInput;\n  }\n\n  render() {\n    const parsedInput = this.parseInput(this.state.formInput); \n    return (\n      <div className=\"Deposit-Form\">\n        <form onSubmit={this.onFormSubmit} className=\"Deposit-Form-Form\">\n          <input type=\"text\" value={this.state.formInput} onChange={this.onInputChange}  className=\"Deposit-Form-Input\" />\n          <div className=\"Input-Border\"></div>\n          <input type=\"submit\" className=\"Button Deposit-Submit\" value=\"Add\" />\n          {this.state.formInput !== ''\n            ? (<button type=\"button\" className=\"Button Deposit-Clear\" onClick={this.clearForm}><X size={20} /></button>)\n            : null \n          }\n        </form>\n        <div className=\"Parsed-Input\">\n          <div className=\"Base-Input\">{parsedInput.input}</div>\n          {parsedInput.place !== '' && (<div className=\"Place-Input\"><span>Place: </span> {parsedInput.place}</div>)}\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './deposit-list-item.scss';\n\ntype DepositListItemProps = {\n\tvalue: string,\n\tdate: Date,\n\tstatus: boolean,\n\thash: string,\n\tchangeStatus: any\n};\ntype DepositListItemState = {\n\tchecked: boolean\n};\n\nexport default class DepositListItem extends React.Component<DepositListItemProps, DepositListItemState> {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tchecked: this.props.status\n\t\t};\n\t}\n\n\tonCheckChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tthis.setState({\n\t\t\tchecked: !this.state.checked\n\t\t});\n\t\tthis.props.changeStatus(event, this.props.hash);\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"Deposit-List-Item\">\n\t\t\t\t<div className=\"Deposit-Check\">\n\t\t\t\t\t<input type=\"checkbox\" checked={this.state.checked} onChange={this.onCheckChange} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"Deposit-Value\">\n\t\t\t\t\t<div className=\"Value\" style={{textDecoration: this.state.checked ? 'line-through' : 'none', textDecorationColor: 'rgba(255,255,255,0.7)'}}>{this.props.value}</div>\n\t\t\t\t\t<div className=\"Date\">{this.props.date.toDateString()}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport { RootStore } from '../../models/root-store';\nimport { DepositStore } from '../../models/deposit-list-store';\nimport { DepositStatus } from '../../models/deposit';\nimport { observer } from 'mobx-react';\nimport './root-component.scss';\nimport DepositForm from '../deposit-form';\nimport DepositListItem from '../deposit-list-item';\n\ninterface RootComponentProps {\n  rootStore: RootStore;\n  depositStore: DepositStore;\n}\n\n@observer\nexport default class RootComponent extends React.Component<RootComponentProps, {value: string, test: any, hide?: boolean}> {\n  constructor(props) {\n    super(props);\n\n    this.state = {value: \"\", test: \"\", hide: true};\n  }\n\n  onDepositFormSubmit = (value: string) => {\n    const deposit = {\n      value,\n      status: DepositStatus.unprocessed\n    }\n    this.props.depositStore.addDeposit(deposit);\n  }\n\n  onClear = (event) => {\n    this.props.depositStore.setDeposits(null);\n  }\n\n  onChangeStatus = (event, hash) => {\n    const depositIndex = this.props.depositStore.deposits.findIndex((d) => d.hash === hash);\n    this.props.depositStore.changeDeposit(depositIndex, {status: this.props.depositStore.deposits[depositIndex].status === DepositStatus.unprocessed ? DepositStatus.actedUpon : DepositStatus.unprocessed});\n  }\n\n  changeShown = () => {\n    this.setState({hide: !this.state.hide});\n  }\n\n  render() {\n    const deposits = this.props.depositStore.chronoView.map((d) => {\n      if(!this.state.hide) {\n        if(d.status===DepositStatus.unprocessed) {\n          return (<DepositListItem key={d.hash} hash={d.hash} value={d.value} status={d.status !== DepositStatus.unprocessed} date={d.dateAdded} changeStatus={this.onChangeStatus} />)\n        } else {\n          return null;\n        }\n      } else {\n        return (<DepositListItem key={d.hash} hash={d.hash} value={d.value} status={d.status !== DepositStatus.unprocessed} date={d.dateAdded} changeStatus={this.onChangeStatus} />)\n      }\n    }) as any;\n\n    return (\n      <div className=\"Root\">\n        <DepositForm onSubmit={this.onDepositFormSubmit} />\n        { deposits }\n        <button type=\"button\" onClick={this.onClear}>Clear Deposits</button>\n        <button type=\"button\" onClick={this.changeShown}>{ this.state.hide ? 'Hide Finished' : 'Show Finished' }</button>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './App.scss';\nimport { RootStore } from '../models/root-store';\nimport { setupRootStore } from './setup-root-store';\nimport RootComponent from '../components/root-component';\nimport { observer } from 'mobx-react';\n\ninterface AppState {\n  rootStore?: RootStore,\n  userState: any,\n  themeDark: boolean\n}\n\n@observer\nexport default class App extends React.Component<{}, AppState> {\n  \n  async componentDidMount() {\n    const rootStore = await setupRootStore();\n    this.setState({\n      userState: {},\n      themeDark: true,\n      rootStore\n    });\n    rootStore.environment.api.auth.onAuthStateChanged(this.authStateChange, this.authStateChangeError);\n  }\n\n  authStateChange = (val) => {\n    if(val && val.email) {\n      val.email && console.log('root store', val.email);\n      this.setState({\n        userState: {\n          email: val.email\n        }\n      });\n    } else {\n      this.setState({\n        userState: {\n          email: \"not logged in\"\n        }\n      });\n    }\n  }\n\n  authStateChangeError = (error) => {\n    console.log(error);\n  }\n\n  changeTheme = () => {\n    this.setState({themeDark: !this.state.themeDark});\n  }\n  \n  render() {\n    const rootStore = this.state && this.state.rootStore;\n    const email = this.state && this.state.userState && this.state.userState.email;\n\n    if(!rootStore) {\n      return (\n        <div>Initializing...</div>\n      );\n    }\n\n    const depositStore = rootStore.depositStore;\n\n    return (\n      <div className={ this.state.themeDark ? \"App Dark\" : \"App Light\" }>\n        <div className=\"App-inner\">\n          { email ? email : 'Loading...' }\n          <RootComponent rootStore={rootStore} depositStore={depositStore} />\n        </div>\n        <button type=\"button\" className=\"Button Theme\" onClick={this.changeTheme}>Change Theme</button>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}