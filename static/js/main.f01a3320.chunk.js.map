{"version":3,"sources":["models/deposit/deposit.ts","utilities/helpers.ts","models/status.ts","models/deposit/deposit-list-store.ts","models/context/context.ts","models/context/context-list-store.ts","models/project/project.ts","models/project/project-list-store.ts","models/root-store/root-store.ts","models/environment.ts","utilities/storage.ts","services/api/api-problem.ts","services/api/api-config.ts","services/api/api.ts","services/deposit-api/deposit-api.ts","services/context-api/context-api.ts","utilities/setup-root-store.ts","segments/dashboard/dashboard.tsx","components/item-select/item-select.tsx","components/deposit-form/deposit-form.tsx","dummies/deposit-list-item/deposit-list-item.tsx","dummies/button/button.tsx","segments/deposits/deposits.tsx","dummies/project-list-item/project-list-item.tsx","segments/projects/projects.tsx","segments/stats/stats.tsx","segments/options/options.tsx","components/root-component/root-component.tsx","segments/nav/nav.tsx","app/App.tsx","serviceWorker.js","index.tsx","assets/images/fruition.png"],"names":["DepositStatus","DepositModel","types","model","props","id","optional","identifier","value","string","status","enumeration","Object","values","unprocessed","dateAdded","Date","dateEdited","dateCompleted","union","boolean","positionInProject","null","number","contextId","projectId","actions","self","setValue","setStatus","setContext","root","getRoot","contextStore","findById","setProject","projectStore","views","uuidv4","require","_objectAssign$1","assign","target","TypeError","prop","obj","output","idx","length","arguments","source","nextKey","prototype","hasOwnProperty","call","_isPlaceholder","a","_curry1","fn","f1","apply","this","_isArray","Array","isArray","val","toString","_isArrayLike","x","_isString","nodeType","recursive","LoadingStatus","UUIDGenerator","crypto","Math","random","substring","isNil","list","concat","flatt","jlen","j","result","ilen","compare","b","DepositListStoreModel","idle","deposits","array","currentlyTyping","setDeposits","replace","clear","setCurrentlyTyping","addDeposit","context","project","deposit","projectObj","added","create","changeDeposit","index","getEnv","slice","sort","d1","d2","getTime","loadDeposits","flow","pending","environment","depositApi","getDeposits","kind","done","error","chronoView","chronological","find","d","findByContext","contextID","filter","findByProject","projectID","ContextModel","name","setName","depositStore","ContextListStoreModel","contexts","defaultContext","setContexts","setDefaultContext","c","addContext","changeContext","c1","c2","C1","toUpperCase","C2","findByName","addItem","setDefaultItem","ProjectModel","active","setActive","ProjectListStoreModel","projects","defaultProject","selectedProject","setProjects","addProject","changeProject","p1","p2","P1","P2","v","RootStoreModel","user","isDarkTheme","isNewStore","currentRoute","signIn","email","password","api","signInUser","changeTheme","setIsNewStore","setCurrentRoute","route","Environment","contextApi","firebaseConfig","apiKey","process","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","load","key","VALUE","localStorage","getItem","JSON","parse","save","setItem","stringify","getGeneralApiProblem","response","problem","temporary","DEFAULT_API_CONFIG","url","timeout","Api","config","apisauce","auth","createUser","createUserWithEmailAndPassword","then","rsn","signInWithEmailAndPassword","signOutUser","signOut","useFirebase","baseURL","headers","app","username","get","ok","resultUser","DepositApi","Accept","e","console","message","completed","params","data","ContextApi","ROOT_STATE_STORAGE_KEY","setupRootStore","createEnvironment","env","storage","defaultRootStore","rootStore","getSnapshot","onSnapshot","snapshot","setup","defaultContextListStore","defaultDepositListStore","Dashboard","className","ItemSelect","observer","changeSelectedItem","event","item","store","setState","selectedItem","onFormSubmit","preventDefault","newItemInput","state","onInputChange","toggleOpen","isOpen","globalToggleOpen","ref","document","getElementById","contains","defaultItem","window","addEventListener","removeEventListener","canBeNull","itemSelectId","itemInputId","items","map","onClick","isDisabled","style","borderRadius","display","onSubmit","htmlFor","type","onChange","disabled","size","React","Component","DepositForm","formInput","clearForm","DepositListItem","date","checked","changeStatus","depositId","textDecoration","toDateString","Button","variant","bg","background","children","Deposits","onChangeStatus","depositIndex","findIndex","actedUpon","changeShown","filters","hide","onClear","padding","marginRight","onGenericCallback","depositProps","Projects","handleCallback","stores","p","Stats","Options","RootComponent","navItem","Nav","triggerSegmentChange","segment","onSegmentChange","currentNav","initialNavState","navItems","navs","n","icon","src","fruition","alt","App","unsubscribeFromAuthStateChanges","_isMounted","authStateChange","userState","authStateChangeError","log","onAuthStateChanged","position","bottom","right","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"yVAEYA,E,gIAAAA,K,0BAAAA,E,kBAAAA,E,sBAAAA,E,wBAAAA,E,uBAAAA,E,oBAAAA,E,sBAAAA,E,mCAAAA,M,KAWL,IAAMC,EAAeC,IAAMC,MAAM,WACrCC,MAAM,CACLC,GAAIH,IAAMI,SAASJ,IAAMK,WAAY,wCACrCC,MAAON,IAAMO,OACbC,OAAQR,IAAMI,SAASJ,IAAMS,YAA2B,gBAAiBC,OAAOC,OAAOb,IAAiBA,EAAcc,aACtHC,UAAWb,IAAMI,SAASJ,IAAMc,KAAM,IAAIA,MAC1CC,WAAYf,IAAMI,SAASJ,IAAMc,KAAM,IAAIA,MAC3CE,cAAehB,IAAMI,SAASJ,IAAMiB,MAAMjB,IAAMkB,QAASlB,IAAMc,OAAO,GACtEK,kBAAmBnB,IAAMI,SAASJ,IAAMiB,MAAMjB,IAAMoB,KAAMpB,IAAMqB,QAAS,MACzEC,UAAWtB,IAAMI,SAASJ,IAAMO,OAAQ,IACxCgB,UAAWvB,IAAMI,SAASJ,IAAMO,OAAQ,MAEzCiB,SAAQ,SAAAC,GAAI,MAAK,CAChBC,SADgB,SACPpB,GACPmB,EAAKnB,MAAQA,EACbmB,EAAKV,WAAa,IAAID,MAExBa,UALgB,SAKNrB,GACRmB,EAAKjB,OAASF,EACdmB,EAAKV,WAAa,IAAID,MAExBc,WATgB,SASLtB,GACT,IAAMuB,EAAOC,YAAQL,GAClBI,GAAQA,EAAKE,cAAgBF,EAAKE,aAAaC,SAAS1B,KACzDmB,EAAKH,UAAYhB,IAGrB2B,WAfgB,SAeL3B,GACT,IAAMuB,EAAOC,YAAQL,GAClBI,GAAQA,EAAKK,cAAgBL,EAAKK,aAAaF,SAAS1B,KACzDmB,EAAKF,UAAYjB,QAItB6B,OAAM,SAAAV,GAAI,MAAK,CACd,cACE,IAAMI,EAAOC,YAAQL,GACrB,OAAGI,GAAQA,EAAKE,cAAiC,KAAjBN,EAAKH,UAC5BO,EAAKE,aAAaC,SAASP,EAAKH,WAChC,IAEX,cACE,IAAMO,EAAOC,YAAQL,GACrB,OAAGI,GAAQA,EAAKK,cAAiC,KAAjBT,EAAKF,UAC5BM,EAAKK,aAAaF,SAASP,EAAKF,WAChC,Q,eCzDTa,EAASC,EAAQ,IA2BvB,IAAMC,EAA2C,oBAAlB5B,OAAO6B,OAAwB7B,OAAO6B,OArBrE,SAAuBC,GACrB,GAAa,MAAVA,EACD,MAAM,IAAIC,UAAU,8CAKtB,IAHA,IARmBC,EAAMC,EAQrBC,EAASlC,OAAO8B,GAChBK,EAAM,EACNC,EAASC,UAAUD,OACjBD,EAAMC,GAAQ,CAClB,IAAIE,EAASD,UAAUF,GACvB,GAAa,MAAVG,EACD,IAAI,IAAIC,KAAWD,EAdJN,EAeLO,EAfWN,EAeFK,EAdhBtC,OAAOwC,UAAUC,eAAeC,KAAKT,EAAKD,KAezCE,EAAOK,GAAWD,EAAOC,IAI/BJ,GAAO,EAET,OAAOD,GAKT,SAASS,EAAeC,GACtB,OAAY,MAALA,GACQ,kBAANA,IAC2B,IAAlCA,EAAE,4BAGN,SAASC,EAAQC,GACf,OAAO,SAASC,EAAGH,GACjB,OAAwB,IAArBP,UAAUD,QAAgBO,EAAeC,GACnCG,EAEAD,EAAGE,MAAMC,KAAMZ,YAK5B,IAAMa,EAAWC,MAAMC,SAAW,SAAkBC,GAClD,OAAe,MAAPA,GACAA,EAAIjB,QAAU,GAC0B,mBAAxCpC,OAAOwC,UAAUc,SAASZ,KAAKW,IAOzC,IAAME,EAAeV,GAAQ,SAAsBW,GACjD,QAAGN,EAASM,MACPA,IACW,kBAANA,KAPZ,SAAmBA,GACjB,MAA6C,oBAAtCxD,OAAOwC,UAAUc,SAASZ,KAAKc,GAOnCC,CAAUD,KACK,IAAfA,EAAEE,WAA2BF,EAAEpB,OAClB,IAAboB,EAAEpB,QACFoB,EAAEpB,OAAS,IAAYoB,EAAEf,eAAe,IAAMe,EAAEf,eAAee,EAAEpB,OAAS,UA8CxE,IA1CYuB,ECnEPC,EDkOCC,EAAgB,WAC3B,MAAqB,kBAAXC,OACDpC,IACAqC,KAAKC,SAASV,SAAS,IAAIW,UAAU,EAAG,IAAMF,KAAKC,SAASV,SAAS,IAAIW,UAAU,EAAG,KAwBpFC,GAPWrB,GAAQ,SAAkBsB,GAEhD,OAAOvC,EAAgBoB,MAAM,KAAM,CAAC,IAAIoB,OAAOD,OAG1BtB,GAxLJc,GAwLsB,EAvLhC,SAASU,EAAMF,GAMpB,IALA,IAAIvE,EAAO0E,EAAMC,EACbC,EAAS,GACTrC,EAAM,EACNsC,EAAON,EAAK/B,OAEVD,EAAMsC,GAAM,CAChB,GAAGlB,EAAaY,EAAKhC,IAInB,IAFAoC,EAAI,EACJD,GAFA1E,EAAQ+D,EAAYU,EAAMF,EAAKhC,IAAQgC,EAAKhC,IAE/BC,OACPmC,EAAID,GAERE,EAAOA,EAAOpC,QAAUxC,EAAM2E,GAC9BA,GAAK,OAIPC,EAAOA,EAAOpC,QAAU+B,EAAKhC,GAE/BA,GAAO,EAET,OAAOqC,KAmKU3B,GAAQ,SAAeW,GAAK,OAAY,MAALA,MAQ3CkB,EAAU,SAAC9B,EAAQ+B,GAC9B,OAAQ/B,EAAI+B,GAAM,EAAK/B,EAAI+B,EAAK,EAAI,I,SCtQ1Bf,K,YAAAA,E,kBAAAA,E,YAAAA,E,eAAAA,M,KCQL,IAAMgB,EAAwBtF,IAAMC,MAAM,oBAC9CC,MAAM,CACLM,OAAQR,IAAMI,SAASJ,IAAMS,YAA2B,2BAA4BC,OAAOC,OAAO2D,IAAiBA,EAAciB,MACjIC,SAAUxF,IAAMI,SAASJ,IAAMyF,MAAM1F,GAAe,IACpD2F,gBAAiB1F,IAAMI,SAASJ,IAAMO,OAAQ,MAE/CiB,SAAQ,SAAAC,GAAI,MAAK,CAChBE,UADgB,SACNrB,GACRmB,EAAKjB,OAASF,GAEhBqF,YAJgB,SAIJrF,GACPmB,EAAK+D,SACHlF,EACDmB,EAAK+D,SAASI,QAAQtF,GAEtBmB,EAAK+D,SAASK,QAGhBpE,EAAK+D,SAAWlF,GAGpBwF,mBAfgB,SAeGxF,GACjBmB,EAAKiE,gBAAkBpF,GAEzByF,WAlBgB,WAkBmH,IAAD,yDAAnF,CAACzF,MAAO,GAAIE,OAAQV,EAAcc,YAAaoF,QAAS,GAAIC,QAAS,IAAxG3F,EAAsH,EAAtHA,MAAOE,EAA+G,EAA/GA,OAAQwF,EAAuG,EAAvGA,QAASC,EAA8F,EAA9FA,QAClC,GAAGxE,EAAK+D,SAAU,CAChB,IAAMU,EAAU,CACd/F,GAAIoE,IACJjD,UAAW0E,EACXzE,UAAW0E,EACX3F,MAAOA,EACPE,OAAQA,EACRW,kBAAmB,MAGrB,GAAG8E,GAAqB,KAAVA,EAAc,CAC1B,IAAMpE,EAAOC,YAAQL,GACrB,GAAGI,GAAQA,EAAKK,aAAc,CAC5B,IAAMiE,EAAatE,EAAKK,aAAaF,SAASiE,GAC3CE,IACDD,EAAQ/E,kBAAoBgF,EAAWX,SAAS1C,SAKtD,IAAMsD,EAAiBrG,EAAasG,OAAOH,GACrCV,EAAQ,sBAAO/D,EAAK+D,UAAa,CAACY,IAExC,OADA3E,EAAK+D,SAASI,QAAQJ,IACf,EACP,OAAO,GAEXc,cA7CgB,SA6CFC,EA7CE,GA6CuB,IAAjBjG,EAAgB,EAAhBA,MAAOE,EAAS,EAATA,OAC3B,SAAGiB,EAAK+D,WAAY/D,EAAK+D,SAASe,MAC7BjG,GAAiB,KAARA,GACVmB,EAAK+D,SAASe,GAAO7E,SAASpB,IACvB,MAENE,GAAmB,KAATA,KACXiB,EAAK+D,SAASe,GAAO5E,UAAUnB,IACxB,SAKd2B,OAAM,SAAAV,GAAI,MAAK,CACd,kBACE,OAAO+E,YAAO/E,IAEhB,gBACE,OAAOK,YAAQL,IAEjB,gBACE,MAAuB,YAAhBA,EAAKjB,QAEd,YACE,OAAOiB,EAAK+D,UAEd,oBACE,OAAO/D,EAAK+D,SAASiB,QAAQC,MAAK,SAACC,EAAIC,GACrC,OAAOxB,EAAQuB,EAAG9F,UAAUgG,UAAWD,EAAG/F,UAAUgG,mBAIzDrF,SAAQ,SAAAC,GAAI,MAAK,CAChBqF,aAAcC,YAAI,UAAC,oFAGA,OAFjBtF,EAAKE,UAAU2C,EAAc0C,SADZ,kBAGMvF,EAAKwF,YAAYC,WAAWC,cAHlC,OAMI,QAHbjC,EAHS,QAMLkC,MAER3F,EAAKkE,YAAYT,EAAOM,UACxB/D,EAAKE,UAAU2C,EAAc+C,OAE7B5F,EAAKE,UAAU2C,EAAcgD,OAXhB,gDAcf7F,EAAKE,UAAU2C,EAAcgD,OAdd,6DAkBpBnF,OAAM,SAAAV,GAAI,MAAK,CACd8F,WADc,SACH/B,GACT,OAAGA,EACMA,EAASiB,QAAQC,MAAK,SAACC,EAAIC,GAChC,OAAOxB,EAAQuB,EAAG9F,UAAUgG,UAAWD,EAAG/F,UAAUgG,cAG/CpF,EAAK+F,eAGhBxF,SAVc,SAUL7B,GACP,GAAGsB,EAAK+D,SAAU,CAChB,IAAMlF,EAAQmB,EAAK+D,SAASiC,MAAK,SAACC,GAAD,OAAOA,EAAEvH,KAAOA,KACjD,OAAGG,IAEM,EACT,OAAO,GAEXqH,cAlBc,SAkBAC,GACZ,OAAOnG,EAAK+D,SAASqC,QAAO,SAAC3B,GAAD,OAAaA,EAAQ5E,YAAcsG,MAEjEE,cArBc,SAqBAC,GACZ,OAAOtG,EAAK+D,SAASqC,QAAO,SAAC3B,GAAD,OAAaA,EAAQ3E,YAAcwG,UClIxDC,EAAehI,IAAMC,MAAM,WACrCC,MAAM,CACLC,GAAIH,IAAMI,SAASJ,IAAMK,WAAY,wCACrC4H,KAAMjI,IAAMI,SAASJ,IAAMO,OAAQ,MAEpCiB,SAAQ,SAAAC,GAAI,MAAK,CAChByG,QADgB,SACR5H,GACNmB,EAAKwG,KAAO3H,OAGf6B,OAAM,SAAAV,GAAI,MAAK,CACd,eACE,IAAMI,EAAOC,YAAQL,GACrB,OAAGI,GAAQA,EAAKsG,aACPtG,EAAKsG,aAAaR,cAAclG,EAAKtB,IACrC,QCXFiI,EAAwBpI,IAAMC,MAAM,oBAC9CC,MAAM,CACLM,OAAQR,IAAMI,SAASJ,IAAMS,YAA2B,2BAA4BC,OAAOC,OAAO2D,IAAiBA,EAAciB,MACjI8C,SAAUrI,IAAMI,SAASJ,IAAMyF,MAAMuC,GAAe,IACpDM,eAAgBtI,IAAMI,SAASJ,IAAMO,OAAQ,WAE9CiB,SAAQ,SAAAC,GAAI,MAAK,CAChBE,UADgB,SACNrB,GACRmB,EAAKjB,OAASF,GAEhBiI,YAJgB,SAIJjI,GACPmB,EAAK4G,SACH/H,EACDmB,EAAK4G,SAASzC,QAAQtF,GAEtBmB,EAAK4G,SAASxC,QAGhBpE,EAAK4G,SAAW/H,GAGpBkI,kBAfgB,SAeErI,GACbsB,EAAK4G,UAAY5G,EAAK4G,SAASZ,MAAK,SAACgB,GAAD,OAAOA,EAAEtI,KAAOA,OACrDsB,EAAK6G,eAAiBnI,IAG1BuI,WApBgB,WAoBsB,IAA3BT,EAA0B,uDAAX,UACxB,GAAGxG,EAAK4G,SAAU,CAChB,IAAMrC,EAAmBgC,EAAa3B,OAAO,CAC3ClG,GAAIoE,IACJ0D,KAAMA,IAEFI,EAAQ,sBAAO5G,EAAK4G,UAAa,CAACrC,IAExC,OADAvE,EAAK4G,SAASzC,QAAQyC,IACf,EACP,OAAO,GAEXM,cA/BgB,SA+BFpC,EAAO0B,GACnB,SAAGxG,EAAK4G,WAAY5G,EAAK4G,SAAS9B,QAC7B0B,IACDxG,EAAK4G,SAAS9B,GAAO2B,QAAQD,IACtB,SAKd9F,OAAM,SAAAV,GAAI,MAAK,CACd,kBACE,OAAO+E,YAAO/E,IAEhB,gBACE,OAAOK,YAAQL,IAEjB,gBACE,MAAuB,YAAhBA,EAAKjB,QAEd,kBACE,OAAOiB,EAAK6G,gBAEd,YACE,OAAO7G,EAAK4G,UAEd,mBACE,OAAO5G,EAAK4G,SAAS5B,QAAQC,MAAK,SAACkC,EAAIC,GACrC,IAAMC,EAAKF,EAAGX,KAAKc,cAAqBC,EAAKH,EAAGZ,KAAKc,cACrD,OAAO3D,EAAQ0D,EAAIE,WAIxBxH,SAAQ,SAAAC,GAAI,MAAK,CAChBwH,WADgB,SACLhB,GACT,IAAM3H,EAAQmB,EAAK4G,SAASZ,MAAK,SAACgB,GAAD,OAAOA,EAAER,OAASA,KACnD,OAAG3H,IAEM,GAEX0B,SAPgB,SAOP7B,GACP,IAAMG,EAAQmB,EAAK4G,SAASZ,MAAK,SAACgB,GAAD,OAAOA,EAAEtI,KAAOA,KACjD,OAAGG,IAEM,OAGZkB,SAAQ,SAAAC,GAAI,MAAK,CAChByH,QADgB,SACRjB,GACNxG,EAAKiH,WAAWT,IAElBkB,eAJgB,SAIDhJ,GACbsB,EAAK+G,kBAAkBrI,QC5FhBiJ,EAAepJ,IAAMC,MAAM,WACrCC,MAAM,CACLC,GAAIH,IAAMI,SAASJ,IAAMK,WAAY,wCACrC4H,KAAMjI,IAAMI,SAASJ,IAAMO,OAAQ,eACnC8I,OAAQrJ,IAAMI,SAASJ,IAAMkB,SAAS,GACtCL,UAAWb,IAAMI,SAASJ,IAAMc,KAAM,IAAIA,MAC1CC,WAAYf,IAAMI,SAASJ,IAAMc,KAAM,IAAIA,MAC3CE,cAAehB,IAAMI,SAASJ,IAAMiB,MAAMjB,IAAMkB,QAASlB,IAAMc,OAAO,KAEvEU,SAAQ,SAAAC,GAAI,MAAK,CAChByG,QADgB,SACR5H,GACNmB,EAAKwG,KAAO3H,GAEdgJ,UAJgB,SAINhJ,GACRmB,EAAK4H,OAAS/I,OAGjB6B,OAAM,SAAAV,GAAI,MAAK,CACd,eACE,IAAMI,EAAOC,YAAQL,GACrB,OAAGI,GAAQA,EAAKsG,aACPtG,EAAKsG,aAAaL,cAAcrG,EAAKtB,IACrC,IAEX,gBACE,OAAO2B,YAAQL,QCrBR8H,EAAwBvJ,IAAMC,MAAM,oBAC9CC,MAAM,CACLM,OAAQR,IAAMI,SAASJ,IAAMS,YAA2B,2BAA4BC,OAAOC,OAAO2D,IAAiBA,EAAciB,MACjIiE,SAAUxJ,IAAMI,SAASJ,IAAMyF,MAAM2D,GAAe,IACpDK,eAAgBzJ,IAAMI,SAASJ,IAAMO,OAAQ,IAC7CmJ,gBAAiB1J,IAAMI,SAASJ,IAAMO,OAAQ,MAE/CiB,SAAQ,SAAAC,GAAI,MAAK,CAChBE,UADgB,SACNrB,GACRmB,EAAKjB,OAASF,GAEhBqJ,YAJgB,SAIJrJ,GACPA,EACEmB,EAAK+H,SACN/H,EAAK+H,SAAS5D,QAAQtF,GAEtBmB,EAAK+H,SAAWlJ,EAGlBmB,EAAK+H,SAAS3D,SAGlBsD,eAfgB,SAeDhJ,GACbsB,EAAKiI,gBAAkBvJ,GAEzByJ,WAlBgB,WAkBsB,IAA3B3B,EAA0B,uDAAX,UACxB,GAAGxG,EAAK+H,SAAU,CAChB,IAAMvD,EAAmBmD,EAAa/C,OAAO,CAC3ClG,GAAIoE,IACJ0D,KAAMA,IAEFuB,EAAQ,sBAAO/H,EAAK+H,UAAa,CAACvD,IAExC,OADAxE,EAAK+H,SAAS5D,QAAQ4D,IACf,EACP,OAAO,GAEXK,cA7BgB,SA6BFtD,EAAO0B,GACnB,SAAGxG,EAAK+H,WAAY/H,EAAK+H,SAASjD,QAC7B0B,IACDxG,EAAK+H,SAASjD,GAAO2B,QAAQD,IACtB,SAKd9F,OAAM,SAAAV,GAAI,MAAK,CACd,kBACE,OAAO+E,YAAO/E,IAEhB,gBACE,OAAOK,YAAQL,IAEjB,gBACE,MAAuB,YAAhBA,EAAKjB,QAEd,kBACE,OAAOiB,EAAKgI,gBAEd,YACE,OAAOhI,EAAK+H,UAEd,mBACE,OAAO/H,EAAK+H,SAAS/C,QAAQC,MAAK,SAACoD,EAAIC,GACrC,IAAMC,EAAKF,EAAG7B,KAAKc,cAAqBkB,EAAKF,EAAG9B,KAAKc,cACrD,OAAO3D,EAAQ4E,EAAIC,WAIxBzI,SAAQ,SAAAC,GAAI,MAAK,CAChBO,SADgB,SACP7B,GACP,GAAGsB,EAAK+H,SAAU,CAChB,IAAMlJ,EAAQmB,EAAK+H,SAAS/B,MAAK,SAACyC,GAAD,OAAOA,EAAE/J,KAAOA,KACjD,OAAGG,IAEM,EACT,OAAO,GAEX2I,WATgB,SASLhB,GACT,GAAGxG,EAAK+H,SAAU,CAChB,IAAMlJ,EAAQmB,EAAK+H,SAAS/B,MAAK,SAACyC,GAAD,OAAOA,EAAEjC,OAASA,KACnD,OAAG3H,IAEM,EACT,OAAO,OAGZkB,SAAQ,SAAAC,GAAI,MAAK,CAChByH,QADgB,SACRjB,GACNxG,EAAKmI,WAAW3B,QCpFTkC,EAAiBnK,IAAMC,MAAM,aACvCC,MAAM,CAELiI,aAAcnI,IAAMI,SAASkF,EAAuB,IACpDvD,aAAc/B,IAAMI,SAASgI,EAAuB,IACpDlG,aAAclC,IAAMI,SAASmJ,EAAuB,IACpDa,KAAMpK,IAAMI,SAASJ,IAAMO,OAAQ,IACnC8J,YAAarK,IAAMI,SAASJ,IAAMkB,SAAS,GAC3CoJ,WAAYtK,IAAMI,SAASJ,IAAMkB,SAAS,GAC1CqJ,aAAcvK,IAAMI,SAASJ,IAAMO,OAAQ,eAE5C4B,OAAM,SAAAV,GAAI,MAAK,CACd,kBACE,OAAO+E,YAAO/E,QAGjBD,SAAQ,SAAAC,GAAI,MAAK,CAChB+I,OADgB,SACTC,EAAOC,GACZ,OAAOjJ,EAAKwF,YAAY0D,IAAIC,WAAWH,EAAOC,IAEhDG,YAJgB,WAMd,OADApJ,EAAK4I,aAAe5I,EAAK4I,aAClB,GAETS,cARgB,SAQFR,GACZ7I,EAAK6I,WAAaA,GAEpBS,gBAXgB,SAWAC,GACdvJ,EAAK8I,aAAeS,OClCbC,EAAb,sCACEN,SADF,OAEEzD,gBAFF,OAGEgE,gBAHF,GAMaC,EAAiB,CAC5BC,OAAQC,uDAAYC,kBACpBC,WAAYF,uDAAYG,sBACxBC,YAAaJ,uDAAYK,uBACzBnK,UAAW8J,uDAAYM,qBACvBC,cAAeP,uDAAYQ,yBAC3BC,kBAAmBT,uDAAYU,8BAC/BC,MAAOX,uDAAYY,kBCaRC,EAAO,SAACC,GACnB,IAAMC,EAAQC,aAAaC,QAAQH,GACnC,MAAoB,kBAAVC,EACDG,KAAKC,MAAMJ,GACN,MASHK,EAAO,SAACN,EAAa7L,GAChC,IAME,MALoB,kBAAVA,EACR+L,aAAaK,QAAQP,EAAKI,KAAKI,UAAUrM,IAEzC+L,aAAaK,QAAQP,EAAK7L,IAErB,EACP,SACA,OAAO,I,QCPJ,SAASsM,EAAqBC,GACnC,OAAQA,EAASC,SACf,IAAK,mBAEL,IAAK,gBACH,MAAO,CAAE1F,KAAM,iBAAkB2F,WAAW,GAC9C,IAAK,gBACH,MAAO,CAAE3F,KAAM,UAAW2F,WAAW,GACvC,IAAK,eACH,MAAO,CAAE3F,KAAM,UACjB,IAAK,gBACH,MAAO,CAAEA,KAAM,UAAW2F,WAAW,GACvC,IAAK,eACH,OAAQF,EAASrM,QACf,KAAK,IACH,MAAO,CAAE4G,KAAM,gBACjB,KAAK,IACH,MAAO,CAAEA,KAAM,aACjB,QACE,MAAO,CAAEA,KAAM,YAErB,IAAK,eACH,OAAO,KAGX,OAAO,KC/DF,IAAM4F,EAAgC,CAC3CC,IAAK,yBACLC,QAAS,K,QCFEC,EAAb,WAME,aAAqD,IAAD,OAAxCC,EAAwC,uDAApBJ,EAAoB,yBALpDK,cAKoD,OAJpDD,YAIoD,OAHpDE,UAGoD,OAFpDlD,UAEoD,OAuCpDmD,WAAa,SAAC9C,EAAOC,GACnB,EAAK4C,KAAKE,+BAA+B/C,EAAOC,GAAU+C,MAAK,SAAC1J,GAC9D,EAAKqG,KAAOrG,EAAIqG,QACf,SAACsD,GACF,EAAK9C,WAAWH,EAAOC,OA3CyB,KA+CpDE,WAAa,SAACH,EAAOC,GAEnB,OADQ,EAAK4C,KAAKK,2BAA2BlD,EAAOC,IAhDF,KAqDpDkD,YAAc,kBAAM,EAAKN,KAAKO,WApD5BlK,KAAKyJ,OAASA,EACdzJ,KAAKyG,KAAO,CACVK,MAAO,QATb,kDAaQqD,GACJnK,KAAK0J,SAAWhH,iBAAO,CACrB0H,QAASpK,KAAKyJ,OAAOH,IACrBC,QAASvJ,KAAKyJ,OAAOF,QACrBc,QAAS,KAGRF,IACDG,gBAAkB9C,GAElBxH,KAAK2J,KAAOW,YAvBlB,uEA2BgBC,GA3BhB,2FA4B6CvK,KAAK0J,SAASc,IAAd,iBAA4BD,IA5BzE,WA4BUrB,EA5BV,QA8BiBuB,GA9BjB,qBA+BYtB,EAAUF,EAAqBC,IA/B3C,yCAgCyBC,GAhCzB,uBAoCYuB,EAAyB,GApCrC,kBAuCa,CAAEjH,KAAM,KAAMgD,KAAMiE,IAvCjC,2DAyCa,CAAEjH,KAAM,aAzCrB,wHCAakH,EAAb,WAKE,aAAqD,IAAzClB,EAAwC,uDAApBJ,EAAoB,yBAJpDK,cAIoD,OAFpDD,YAEoD,EAClDzJ,KAAKyJ,OAASA,EANlB,oDAUI,IACEzJ,KAAK0J,SAAWhH,iBAAO,CACrB0H,QAASpK,KAAKyJ,OAAOH,IACrBC,QAASvJ,KAAKyJ,OAAOF,QACrBc,QAAS,CACPO,OAAQ,sBAGZ,MAAMC,GACNC,QAAQnH,MAAMkH,EAAEE,YAnBtB,2EAuBoBC,GAvBpB,oFAwBUC,EAAShK,EAAM+J,GAAa,GAAK,CAAEA,aAxB7C,SAyB6ChL,KAAK0J,SAASc,IAAd,YAA+BS,GAzB5E,WAyBU/B,EAzBV,QA2BiBuB,GA3BjB,qBA4BYtB,EAAUF,EAAqBC,IA5B3C,yCA6ByBC,GA7BzB,uBAiCYtH,EAA8BqH,EAASgC,KAjCnD,kBAkCa,CAAEzH,KAAM,KAAM5B,aAlC3B,2DAoCa,CAAE4B,KAAM,aApCrB,wHCAa0H,EAAb,WAKE,aAAqD,IAAzC1B,EAAwC,uDAApBJ,EAAoB,yBAJpDK,cAIoD,OAFpDD,YAEoD,EAClDzJ,KAAKyJ,OAASA,EANlB,oDAUI,IACEzJ,KAAK0J,SAAWhH,iBAAO,CACrB0H,QAASpK,KAAKyJ,OAAOH,IACrBC,QAASvJ,KAAKyJ,OAAOF,QACrBc,QAAS,CACPO,OAAQ,sBAGZ,MAAMC,GACNC,QAAQnH,MAAMkH,EAAEE,YAnBtB,2EAuBoBC,GAvBpB,oFAwBUC,EAAShK,EAAM+J,GAAa,GAAK,CAAEA,aAxB7C,SAyB6ChL,KAAK0J,SAASc,IAAd,YAA+BS,GAzB5E,WAyBU/B,EAzBV,QA2BiBuB,GA3BjB,qBA4BYtB,EAAUF,EAAqBC,IA5B3C,yCA6ByBC,GA7BzB,uBAiCYzE,EAA8BwE,EAASgC,KAjCnD,kBAkCa,CAAEzH,KAAM,KAAMiB,aAlC3B,2DAoCa,CAAEjB,KAAM,aApCrB,wHCIM2H,EAAyB,MAExB,SAAeC,EAAtB,kC,4CAAO,WAA8BlB,GAA9B,mBAAAxK,EAAA,sEAIa2L,EAAkBnB,GAJ/B,cAICoB,EAJD,yBAMWC,EAAaJ,GANxB,gDAMoDK,IANpD,OAMHP,EANG,KAOHQ,EAAYlF,EAAe9D,OAAOwI,EAAMK,GAPrC,kDASHG,EAAYlF,EAAe9D,OAAO+I,IAAoBF,GATnD,eAYFG,EAAU/E,aACX+E,EAAUvE,eAAc,GACxBqE,EAAaJ,EAAwBO,YAAYD,KAGnDE,YAAWF,GAAW,SAAAG,GAAQ,OAAIL,EAAaJ,EAAwBS,MAjBlE,kBAmBEH,GAnBF,2D,sBAsBA,SAAeJ,EAAtB,kC,4CAAO,WAAiCnB,GAAjC,eAAAxK,EAAA,6DACC4L,EAAM,IAAIjE,GAEZN,IAAM,IAAIwC,EACd+B,EAAIhI,WAAa,IAAIoH,EACrBY,EAAIhE,WAAa,IAAI4D,EALhB,SAOCI,EAAIvE,IAAI8E,MAAM3B,GAPf,uBAQCoB,EAAIhI,WAAWuI,QARhB,wBASCP,EAAIhE,WAAWuE,QAThB,iCAWEP,GAXF,6C,sBAcA,SAASE,IACd,IAAMM,EAA0BtH,EAAsB/B,SACtDqJ,EAAwBhH,WAAW,WACnCgH,EAAwBlH,kBAAkBkH,EAAwBrH,SAAS,GAAGlI,IAE9E,IAAMwP,EAA0BrK,EAAsBe,SAOtD,OANAsJ,EAAwB5J,WAAW,CACjCzF,MAAO,kCACPE,OAAQV,EAAcc,YACtBoF,QAAS0J,EAAwBrH,SAAS,GAAGlI,KAGxC,CAAEgI,aAAcwH,EAAyB5N,aAAc2N,G,2BC1DjD,SAASE,GAAU1P,GAChC,OACE,yBAAK2P,UAAU,aAAf,OAA+B,oC,qDCcdC,GADpBC,a,eAEC,WAAY7P,GAAQ,IAAD,uBACjB,4CAAMA,KAoBR8P,mBAAqB,SAACC,GACpB,IAAM9P,EAAK8P,EAAMzN,OAAOrC,GAClB+P,EAAO,EAAKhQ,MAAMiQ,MAAMnO,SAAS7B,GACvC,EAAKiQ,SAAS,CAAEC,aAAcH,GAAc,CAACjI,KAAM,SAAU9H,GAAI,EAAKD,MAAMC,GAAG,wBAC/E,EAAKD,MAAMiQ,MAAMhH,eAAehJ,IAzBf,EA4BnBmQ,aAAe,SAACL,GACdA,EAAMM,iBADsD,IAEpDC,EAAiB,EAAKC,MAAtBD,aACAL,EAAU,EAAKjQ,MAAfiQ,MACmB,IAAxBK,EAAa1N,QAAiBqN,EAAMlH,WAAWuH,KAChDL,EAAMjH,QAAQsH,GACd,EAAKJ,SAAS,CAAEI,aAAc,OAlCf,EAsCnBE,cAAgB,SAACT,GACf,EAAKG,SAAS,CAAEI,aAAcP,EAAMzN,OAAOlC,SAvC1B,EA0CnBqQ,WAAa,WACX,EAAKP,UAAS,SAAAK,GAAK,MAAK,CAAEG,QAASH,EAAMG,YA3CxB,EA8CnBC,iBAAmB,SAACZ,GAClB,IAAMa,EAAMC,SAASC,eAAe,EAAK9Q,MAAMC,GAAK,gBACjD2Q,GAAOb,EAAMzN,OAAOrC,KAAO2Q,IAAQA,EAAIG,SAAShB,EAAMzN,SACvD,EAAK4N,SAAS,CAAEQ,QAAQ,KA9C1B,IAAMM,EAAc,EAAKhR,MAAMiQ,MAAMnO,SAAS,EAAK9B,MAAMiQ,MAAMe,aAH9C,OAKjB,EAAKT,MAAQ,CACXJ,aAAca,GAA4B,CAACjJ,KAAM,SAAU9H,GAAI,EAAKD,MAAMC,GAAG,sBAC7EyQ,QAAQ,EACRJ,aAAc,GACdlJ,MAAO,IATQ,E,iFAcjB6J,OAAOC,iBAAiB,QAASzN,KAAKkN,kBAAkB,K,6CAIxDM,OAAOE,oBAAoB,QAAS1N,KAAKkN,kBAAkB,K,+BAmCnD,IAAD,SACwClN,KAAK8M,MAA5CG,EADD,EACCA,OAAQP,EADT,EACSA,aAAcG,EADvB,EACuBA,aADvB,EAE0B7M,KAAKzD,MAA9BiQ,EAFD,EAECA,MAAOhQ,EAFR,EAEQA,GAAImR,EAFZ,EAEYA,UACbC,EAAepR,EAAK,eACpBqR,EAAcrR,EAAK,qBAEnBsR,EAAQtB,EAAMsB,MAAMhL,QAAQoB,QAAO,SAACY,GAAD,OAAOA,EAAEtI,KAAOkQ,EAAalQ,MAAIuR,KACxE,SAACjJ,GAAD,OAAQ,yBAAK0D,IAAK1D,EAAEtI,GAAIA,GAAIsI,EAAEtI,GAAI0P,UAAU,OAAO8B,QAAS,EAAK3B,oBAAsBvH,EAAER,SAGrF2J,EAAqC,IAAxBpB,EAAa1N,QAAgBqN,EAAMlH,WAAWuH,GAEjE,OACE,yBAAKrQ,GAAKoR,EAAe1B,UAAU,eACjC,yBAAKA,UAAU,SAAf,IAA0B1P,EAAG4I,cAA7B,KACA,yBAAK8G,UAAU,eAAe8B,QAAShO,KAAKgN,WAAYkB,MAAO,CAACC,aAAclB,EAAS,cAAgB,KACrG,yBAAKf,UAAU,QAASQ,EAAapI,MACrC,yBAAK4H,UAAU,SACb,yBAAKA,UAAU,kBAGnB,yBAAKA,UAAU,cAAcgC,MAAO,CAACE,QAASnB,EAAS,QAAU,SAC7Da,EACNH,GAAajB,EAAalQ,KAAKA,EAAG,qBAAwB,yBAAKA,GAAIA,EAAG,qBAAsB0P,UAAU,iBAAiB8B,QAAShO,KAAKqM,oBAA3E,cAAmH,KACzK,yBAAKH,UAAU,YACb,0BAAMmC,SAAUrO,KAAK2M,cAC7B,2BAAO2B,QAAST,GAAhB,OAAmCrR,EAAG4I,eAC5B,2BAAO5I,GAAIqR,EAAaU,KAAK,OAAO5R,MAAOkQ,EAAc2B,SAAUxO,KAAK+M,gBACxE,4BAAQwB,KAAK,SAASE,SAAUR,GAC9B,kBAAC,KAAD,CAAYS,KAAM,c,GAnFMC,IAAMC,a,GCCzBC,GADpBzC,a,eAEC,WAAY7P,GAAQ,IAAD,8BACjB,4CAAMA,KAKRoQ,aAAe,SAACL,GAEd,GADAA,EAAMM,iBACsB,KAAzB,EAAKE,MAAMgC,UAAkB,CAC9B,IAAMvM,EAAU,CACd5F,MAAO,EAAKmQ,MAAMgC,UAClBjS,OAAQV,EAAcc,YACtBoF,QAAS,EAAK9F,MAAM8F,QAAQsC,eAC5BrC,QAAS,EAAK/F,MAAM+F,QAAQyD,iBAE9B,EAAKxJ,MAAMiQ,MAAMpK,WAAWG,GAE9B,EAAKkK,SAAS,CAAEqC,UAAW,MAjBV,EAoBnB/B,cAAgB,SAACT,GACf,EAAKG,SAAS,CAAEqC,UAAWxC,EAAMzN,OAAOlC,QACxC,EAAKJ,MAAMiQ,MAAMrK,mBAAmBmK,EAAMzN,OAAOlC,QAtBhC,EAyBnBoS,UAAY,SAACzC,GACX,EAAKG,SAAS,CAAEqC,UAAW,KAC3B,EAAKvS,MAAMiQ,MAAMrK,mBAAmB,KAxBpC,EAAK2K,MAAQ,CAAEgC,UAAWvS,EAAMiQ,MAAMzK,iBAHrB,E,sEA8BT,IAAD,EACsB/B,KAAKzD,MAA1B8F,EADD,EACCA,QAASC,EADV,EACUA,QAEjB,OACE,yBAAK4J,UAAU,gBACb,0BAAMmC,SAAUrO,KAAK2M,aAAcT,UAAU,qBAC3C,2BAAOqC,KAAK,OAAO5R,MAAOqD,KAAK8M,MAAMgC,UAAWN,SAAUxO,KAAK+M,cAAgBb,UAAU,uBACzF,yBAAKA,UAAU,iBACf,2BAAOqC,KAAK,SAASrC,UAAU,iBAAiBvP,MAAM,MAAM8R,SAAmC,KAAzBzO,KAAK8M,MAAMgC,YACvD,KAAzB9O,KAAK8M,MAAMgC,UACP,4BAAQP,KAAK,SAASrC,UAAU,gBAAgB8B,QAAShO,KAAK+O,WAAW,kBAAC,KAAD,CAAGL,KAAM,MACnF,MAIN,yBAAKxC,UAAU,cACb,kBAAC,GAAD,CAAY1P,GAAG,UAAUgQ,MAAOnK,EAASsL,WAAW,IACpD,kBAAC,GAAD,CAAYnR,GAAG,UAAUgQ,MAAOlK,EAASqL,WAAW,U,GAhDrBgB,IAAMC,a,UCPhC,SAASI,GAAgBzS,GACvC,IAIQI,EAA0CJ,EAA1CI,MAAOsS,EAAmC1S,EAAnC0S,KAAM5M,EAA6B9F,EAA7B8F,QAASC,EAAoB/F,EAApB+F,QAASzF,EAAWN,EAAXM,OAEvC,OACC,yBAAKqP,UAAU,qBACd,yBAAKA,UAAU,iBACd,2BAAOqC,KAAK,WAAWW,QAASrS,EAAQ2R,SATrB,SAAClC,GACtB/P,EAAM4S,aAAa7C,EAAO/P,EAAM6S,eAU/B,yBAAKlD,UAAU,iBACd,yBAAKA,UAAU,QAAQgC,MAAO,CAACmB,eAAgBxS,EAAS,eAAiB,SAAUF,GACnF,yBAAKuP,UAAU,YACd,yBAAKA,UAAU,WAAY7J,EAAQiC,MACjChC,EAAW,yBAAK4J,UAAU,WAAf,YAAoC5J,EAAQgC,MAAgB,KACzE,yBAAK4H,UAAU,QAAS+C,EAAKK,mB,klBC3BlC,I,GAmBeC,GAnBA,SAAChT,GACd,IAAMiT,EAAUjT,EAAMiT,SAAWjT,EAAMiT,QACnCC,EAAK,UACT,GAAGD,EACD,OAAOA,GACL,IAAK,QACHC,EAAK,UACL,MACF,QACEA,EAAK,UAKX,OACE,4BAAQvB,MAAK,IAAGwB,WAAYD,GAAOlT,EAAM2R,OAAQK,KAAK,SAASrC,UAAU,SAAS8B,QAASzR,EAAMyR,SAAUzR,EAAMoT,WCIhGC,GADpBxD,a,eAEC,WAAY7P,GAAQ,IAAD,8BACjB,4CAAMA,KAKRsT,eAAiB,SAACvD,EAAY9P,GAC5B,IAAMsT,EAAe,EAAKvT,MAAMiI,aAAa3C,SAASkO,WAAU,SAAChM,GAAD,OAAOA,EAAEvH,KAAOA,KAChF,EAAKD,MAAMiI,aAAa7B,cAAcmN,EAAc,CAACnT,MAAO,GAAIE,OAAQ,EAAKN,MAAMiI,aAAa3C,SAASiO,GAAcjT,SAAWV,EAAcc,YAAcd,EAAc6T,UAAY7T,EAAcc,eARrL,EAWnBgT,YAAc,WACZ,EAAKxD,UAAS,SAAAK,GAAK,MAAK,CAAEoD,QAAS,CAACC,MAAOrD,EAAMoD,QAAQC,WAZxC,EAenBC,QAAU,SAAC9D,GACT,EAAK/P,MAAMiI,aAAaxC,YAAY,OAbpC,EAAK8K,MAAQ,CAAEoD,QAAS,CAAEC,MAAM,IAHf,E,sEAmBT,IAAD,OACDtO,EAAW7B,KAAKzD,MAAMiI,aAAaX,cAAckK,KAAI,SAAChK,GAC1D,OAAI,EAAK+I,MAAMoD,QAAQC,KAOb,kBAACnB,GAAD,CAAiBxG,IAAKzE,EAAEvH,GAAI4S,UAAWrL,EAAEvH,GAAIG,MAAOoH,EAAEpH,MAAOE,OAAQkH,EAAElH,SAAWV,EAAcc,YAAagS,KAAMlL,EAAE7G,UAAWiS,aAAc,EAAKU,eAAgBxN,QAAS,EAAK9F,MAAM6B,aAAaC,SAAS0F,EAAEpG,WAAY2E,QAAS,EAAK/F,MAAMgC,aAAaF,SAAS0F,EAAEnG,aAN5QmG,EAAElH,SAASV,EAAcc,YAClB,kBAAC+R,GAAD,CAAiBxG,IAAKzE,EAAEvH,GAAI4S,UAAWrL,EAAEvH,GAAIG,MAAOoH,EAAEpH,MAAOE,OAAQkH,EAAElH,SAAWV,EAAcc,YAAagS,KAAMlL,EAAE7G,UAAWiS,aAAc,EAAKU,eAAgBxN,QAAS,EAAK9F,MAAM6B,aAAaC,SAAS0F,EAAEpG,WAAY2E,QAAS,EAAK/F,MAAMgC,aAAaF,SAAS0F,EAAEnG,aAExQ,QAOb,OACE,yBAAKsO,UAAU,YACb,kBAAC,GAAD,CAAaM,MAAOxM,KAAKzD,MAAMiI,aAAcnC,QAASrC,KAAKzD,MAAM6B,aAAckE,QAAStC,KAAKzD,MAAMgC,eACnG,yBAAK2N,UAAU,gBACXrK,GAEJ,kBAAC,GAAD,CAAQqM,MAAO,CAACmC,QAAS,SAAUC,YAAa,UAAWtC,QAAShO,KAAKoQ,SAAzE,kBACA,kBAAC,GAAD,CAAQlC,MAAO,CAACmC,QAAS,UAAWrC,QAAShO,KAAKiQ,aAAejQ,KAAK8M,MAAMoD,QAAQC,KAAO,gBAAkB,sB,GAxC/ExB,IAAMC,a,iBCuB7BxC,I,MAAAA,iBAjCf,SAAyB7P,GACvB,IAAM4S,EAAe,SAAC7C,EAAY8C,GAChC,IAAMvE,EAAI,CACR0D,KAAM,iBACNjC,MAAOA,EACP9P,GAAI4S,GAEN7S,EAAMgU,kBAAkB1F,IAGpBhJ,EAAWtF,EAAM+F,QAAQT,SAASiB,QAAQiL,KAAI,SAAChK,GACnD,IAAMyM,EAAe,CACnBpB,UAAWrL,EAAEvH,GACbG,MAAOoH,EAAEpH,MACTE,OAAQkH,EAAElH,SAAWV,EAAcc,YACnCgS,KAAMlL,EAAE7G,UACRiS,aAAcA,EACd9M,QAAS9F,EAAM+F,QAAQoJ,UAAUtN,aAAaC,SAAS0F,EAAEpG,WACzD2E,QAAS/F,EAAM+F,SAEjB,OAAQ,kBAAC0M,GAAD,eAAiBxG,IAAKzE,EAAEvH,IAAQgU,OAG1C,OACE,yBAAKtE,UAAU,qBACb,yBAAKA,UAAU,SAAU3P,EAAM+F,QAAQgC,MACvC,yBAAK4H,UAAU,gBACXrK,OCvBW4O,GADpBrE,a,8MAGCsE,eAAiB,SAACpE,GAChB,GAAkB,mBAAfA,EAAMiC,MAA6BjC,EAAM9P,GAAI,CAC9C,IAAMsT,EAAe,EAAKvT,MAAMoU,OAAOnM,aAAa3C,SAASkO,WAAU,SAAChM,GAAD,OAAOA,EAAEvH,KAAO8P,EAAM9P,MAC7F,EAAKD,MAAMoU,OAAOnM,aAAa7B,cAAcmN,EAAc,CAACnT,MAAO,GAAIE,OAAQ,EAAKN,MAAMoU,OAAOnM,aAAa3C,SAASiO,GAAcjT,SAAWV,EAAcc,YAAcd,EAAc6T,UAAY7T,EAAcc,gB,wEAI9M,IAAD,OAED4I,EADa7F,KAAKzD,MAAhBoU,OACgBpS,aAAasH,SAAS/C,QAAQiL,KAAI,SAAC6C,GACzD,IAAMrU,EAAQ,CACZ+F,QAASsO,EACTL,kBAAmB,EAAKG,gBAE1B,OAAO,kBAAC,GAAD,eAAiBlI,IAAKoI,EAAEpU,IAAQD,OAGzC,OACE,yBAAK2P,UAAU,YACXrG,O,GArB4B8I,IAAMC,a,UCb7B,SAASiC,GAAMtU,GAC5B,OACE,yBAAK2P,UAAU,SAAf,OAA2B,oCCHhB,SAAS4E,GAAQvU,GAC9B,OAAQ,6C,OCiBWwU,GADpB3E,a,oLAGW,IAKJ4E,EALG,EAC6BhR,KAAKzD,MAAjCmP,EADD,EACCA,UAAW9E,EADZ,EACYA,aACbpC,EAAekH,EAAUlH,aACzBpG,EAAesN,EAAUtN,aACzBG,EAAemN,EAAUnN,aAE/B,OAAOqI,GACL,IAAK,YACHoK,EAAW,kBAAC/E,GAAD,MACX,MACF,IAAK,WACH+E,EAAW,kBAAC,GAAD,CAAUxM,aAAcA,EAAcpG,aAAcA,EAAcG,aAAcA,IAC3F,MACF,IAAK,WACHyS,EAAW,kBAAC,GAAD,CAAUL,OAAQjF,IAC7B,MACF,IAAK,QACHsF,EAAW,kBAACH,GAAD,MACX,MACF,IAAK,UACHG,EAAW,kBAACF,GAAD,MACX,MACF,QACEE,EAAW,kBAAC,GAAD,CAAUxM,aAAcA,EAAcpG,aAAcA,EAAcG,aAAcA,IAI/F,OACE,yBAAK2N,UAAU,QACb,yBAAKA,UAAU,qBACX8E,Q,GAhC+BrC,IAAMC,a,gCCN5BqC,G,YACnB,WAAY1U,GAAQ,IAAD,8BACjB,4CAAMA,KAKR2U,qBAAuB,SAAC5E,GACtB,IAAM6E,EAAU7E,EAAMzN,OAAOrC,GAC7B,EAAKD,MAAM6U,gBAAgBD,GAC3B,EAAK1E,SAAS,CAAE4E,WAAYF,KAN5B,EAAKrE,MAAQ,CAAEuE,WAAY9U,EAAM+U,iBAHhB,E,sEAYT,IAAD,OACCC,EAAavR,KAAKzD,MAAlBgV,SACAF,EAAerR,KAAK8M,MAApBuE,WACFG,EAAOD,EAASzO,QAAQiL,KAAI,SAAC0D,GAAD,OAChC,yBAAKjJ,IAAKiJ,EAAEnN,KAAM4H,UAAWuF,EAAEnN,OAAO+M,EAAa,kBAAoB,WAAY7U,GAAIiV,EAAEnN,KAAM0J,QAAS,EAAKkD,sBAC3G,yBAAKhF,UAAU,YAAYuF,EAAEC,UAKjC,OACE,yBAAKxF,UAAU,OACXsF,EACF,yBAAKtF,UAAU,YACb,yBAAKyF,IAAKC,KAAUC,IAAI,OAAO3F,UAAU,e,GA3BlByC,IAAMC,W,kDCElBkD,GADpB1F,a,8MAECmF,c,IACAQ,qC,IACAC,YAAsB,E,EA4CtBC,gBAAkB,SAAC7R,GACdA,GAAOA,EAAI0G,OAAS,EAAKkL,WAC1B,EAAKvF,SAAS,CACZyF,UAAW,CACTpL,MAAO1G,EAAI0G,SAGP,EAAKkL,YACb,EAAKvF,SAAS,CACZyF,UAAW,CACTpL,MAAO,oB,EAMfqL,qBAAuB,SAACxO,GACtBmH,QAAQsH,IAAIzO,I,EAGduD,YAAc,WACZ,EAAK4F,MAAMpB,WAAa,EAAKoB,MAAMpB,UAAUxE,e,EAG/CkK,gBAAkB,SAACD,GACjB,EAAKrE,MAAMpB,WAAa,EAAKoB,MAAMpB,UAAUtE,gBAAgB+J,I,0MAlE7DnR,KAAKgS,YAAa,EAClBhS,KAAKuR,SAAW,CACd,CACEjN,KAAM,YACNoN,KAAO,kBAAC,KAAD,CAAMhD,KAAM,MAClB,CACDpK,KAAM,WACNoN,KAAO,kBAAC,KAAD,CAAahD,KAAM,MACzB,CACDpK,KAAM,WACNoN,KAAO,kBAAC,KAAD,CAAQhD,KAAM,MACpB,CACDpK,KAAM,QACNoN,KAAO,kBAAC,KAAD,CAAUhD,KAAM,MACtB,CACDpK,KAAM,UACNoN,KAAO,kBAAC,KAAD,CAAUhD,KAAM,O,SAIHrD,GAAe,G,OAAjCK,E,OAEH1L,KAAKgS,YACNhS,KAAKyM,SAAS,CACZyF,UAAW,GACXxG,cAIDA,EAAUpI,YAAY0D,IAAI2C,OAC3B3J,KAAK+R,gCAAkCrG,EAAUpI,YAAY0D,IAAI2C,KAAK0I,mBAAmBrS,KAAKiS,gBAAiBjS,KAAKmS,uB,mJAKnHnS,KAAK+R,iCACN/R,KAAK+R,kCAEP/R,KAAKgS,YAAa,I,+BAgClB,IAAMtG,EAAY1L,KAAK8M,OAAS9M,KAAK8M,MAAMpB,UAE3C,OAAIA,EAOF,yBAAKQ,UAAYR,EAAUhF,YAAc,WAAa,aACpD,kBAAC,GAAD,CAAK0K,gBAAiBpR,KAAKoR,gBAAiBE,gBAAiB5F,EAAU9E,aAAc2K,SAAUvR,KAAKuR,WACpG,yBAAKrF,UAAU,aACb,kBAAC,GAAD,CAAetF,aAAc8E,EAAU9E,aAAc8E,UAAWA,KAElE,kBAAC,GAAD,CAAQ8D,QAAQ,QAAQtB,MAAO,CAACoE,SAAU,QAASC,OAAQ,OAAQC,MAAO,OAAQnC,QAAS,UAAWrC,QAAShO,KAAKkH,aAApH,iBAVA,oD,GAhFyByH,IAAMC,a,GCJnB6D,QACW,cAA7BjF,OAAOkF,SAASC,UAEe,UAA7BnF,OAAOkF,SAASC,UAEhBnF,OAAOkF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAAS1F,SAASC,eAAe,SD2H3C,kBAAmB0F,WACrBA,UAAUC,cAAcC,MAAMnJ,MAAK,SAAAoJ,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.f01a3320.chunk.js","sourcesContent":["import { types, getRoot } from 'mobx-state-tree';\n\nexport enum DepositStatus {\n  unprocessed = \"unprocessed\",\n  trashed = \"trashed\",\n  incubated = \"incubated\",\n  referenced = \"referenced\",\n  actedUpon = \"acted upon\",\n  deferred = \"deferred\",\n  delegated = \"delegated\",\n  addedToProject = \"added to project\"\n};\n\nexport const DepositModel = types.model(\"Deposit\")\n  .props({\n    id: types.optional(types.identifier, 'xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx'),\n    value: types.string,\n    status: types.optional(types.enumeration<DepositStatus>(\"DepositStatus\", Object.values(DepositStatus)), DepositStatus.unprocessed),\n    dateAdded: types.optional(types.Date, new Date()),\n    dateEdited: types.optional(types.Date, new Date()),\n    dateCompleted: types.optional(types.union(types.boolean, types.Date), false),\n    positionInProject: types.optional(types.union(types.null, types.number), null),\n    contextId: types.optional(types.string, ''),\n    projectId: types.optional(types.string, '')\n  })\n  .actions(self => ({\n    setValue(value: string) {\n      self.value = value;\n      self.dateEdited = new Date();\n    },\n    setStatus(value: DepositStatus) {\n      self.status = value;\n      self.dateEdited = new Date();\n    },\n    setContext(value: string) {\n      const root = getRoot(self);\n      if(root && root.contextStore && root.contextStore.findById(value)) {\n        self.contextId = value;\n      }\n    },\n    setProject(value: string) {\n      const root = getRoot(self);\n      if(root && root.projectStore && root.projectStore.findById(value)) {\n        self.projectId = value;\n      }\n    }\n  }))\n  .views(self => ({\n    get context() {\n      const root = getRoot(self);\n      if(root && root.contextStore && self.contextId!=='') {\n        return root.contextStore.findById(self.contextId);\n      } return '';\n    },\n    get project() {\n      const root = getRoot(self);\n      if(root && root.projectStore && self.projectId!=='') {\n        return root.projectStore.findById(self.projectId);\n      } return '';\n    }\n  }));\n\ntype DepositType = typeof DepositModel.Type;\nexport interface Deposit extends DepositType {};\n\ntype DepositSnapshotType = typeof DepositModel.SnapshotType;\nexport interface DepositSnapshot extends DepositSnapshotType {};\n","//helpers.ts utility\nconst uuidv4 = require('uuid/v4');\n\nexport function _has(prop, obj): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction _objectAssign(target) {\n  if(target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n  let output = Object(target);\n  let idx = 1;\n  let length = arguments.length;\n  while(idx < length) {\n    var source = arguments[idx];\n    if(source != null) {\n      for(var nextKey in source) {\n        if(_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n}\n\nconst _objectAssign$1 = typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n\nfunction _isPlaceholder(a) {\n  return a != null &&\n    typeof a === 'object' &&\n    a['@@functional/placeholder'] === true;\n}\n\nfunction _curry1(fn) {\n  return function f1(a) {\n    if(arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}\n\nconst _isArray = Array.isArray || function _isArray(val) {\n  return (val != null &&\n          val.length >= 0 &&\n          Object.prototype.toString.call(val) === '[object Array]');\n};\n\nfunction _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}\n\nconst _isArrayLike = _curry1(function _isArrayLike(x) {\n  if(_isArray(x)) { return true; }\n  if (!x) { return false; }\n  if(typeof x !== 'object') { return false; }\n  if(_isString(x)) { return false; }\n  if(x.nodeType === 1) { return !!x.length; }\n  if(x.length === 0) { return true; }\n  if(x.length > 0) { return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1); }\n  return false;\n});\n\nfunction _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while(idx < ilen) {\n      if(_isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while(j < jlen) {\n          //@ts-ignore\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        //@ts-ignore\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n}\n\n/**\n * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n * HERE BE THE EXPORTED FUNCTIONS\n * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n */\n\n \n/**\n * Adds a key value/ index value pair to an object, return original object if key or index already exists\n * \n * @param obj the object\n * @param key key value to be added\n * @param value value at said key value to be added\n * @param index index to use\n */\nexport const addToObject = (obj: Object, key: string, value: any, index: number): Object => {\n  let temp = {};\n  let i = 0;\n\n  for(var prop in obj) {\n    if(obj.hasOwnProperty(prop)) {\n      if(i===index&&key&&value) {\n        temp[key] = value;\n      }\n      temp[prop] = obj[prop];\n      i++;\n    }\n  }\n  if(!index&&key&&value) {\n    temp[key] = value;\n  }\n  return temp;\n}\n\n/**\n * Debounce function\n * \n * @param fn the function to debounce\n */\nexport const debounce = (fn) => {\n  let timeout;\n\n  return function() {\n    let context = this;\n    let args = arguments;\n\n    if(timeout) {\n      window.cancelAnimationFrame(timeout);\n    }\n\n    timeout = window.requestAnimationFrame(function() {\n      fn.apply(context, args);\n    });\n  }\n}\n\n/**\n * Delay function call for some x milliseconds\n * \n * @param ms milliseconds to delay\n */\nexport const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Shuffles an array\n * \n * @param array the array to shuffle\n */\nexport const shuffle = (array: any[]): any[] => {\n  let currentIndex = array.length;\n  let temporaryValue, randomIndex;\n\n  while(0!==currentIndex) {\n    randomIndex = Math.floor(Math.random()*currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  \n  return array;\n}\n\n/**\n * Chooses a random item from an array\n * \n * @param array ...the array\n */\nexport const chooseRandomItem = (array: any[]): any => {\n  return array[Math.floor(Math.random()*array.length)];\n}\n\n/**\n * Converts an array into a CSV string\n * \n * @param array array to convert\n * @param delimiter delimiter to use between values. defaults to ','\n */\nexport const arrayToCsv = (array: any, delimiter: string = ','): string => {\n  return array.map(v => v.map(x => (isNaN(x) ? `\"${x.replace(/\"/g, '\"\"')}\"` : x)).join(delimiter)).join('\\n');\n}\n\n/**\n * Returns intersection of 2 arrays\n * \n * @param a first array\n * @param b second array\n */\nexport const intersection = (a: any[], b: any[]) => {\n  const s = new Set(b);\n  return a.filter(x => s.has(x));\n}\n\n/**\n * Generate a hash for an object\n * \n * @param object object to generate hash for\n * @param key \n */\nexport const toHash = (object: Object, key: string) => {\n  return Array.prototype.reduce.call(\n    object,\n    // eslint-disable-next-line\n    (acc: any, data, index) => ((acc[!key ? index : data[key]] = data), acc),\n    {}\n  );\n}\n\n/**\n * Generates a UUID in a browser, for jest tests where window.crypto is not defined it returns some gross random non-uuid compliant value\n */\nexport const UUIDGenerator = () => {\n  if(typeof crypto === 'object') {\n    return uuidv4();\n  } return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\n\n/**\n * Get size of object, array, or string\n * \n * @param val array, object, or string to measure size of\n */\nexport const size = (val: any): number =>\n  Array.isArray(val)\n    ? val.length\n    : val && typeof val === 'object'\n    ? val.size || val.length || Object.keys(val).length\n    : typeof val === 'string'\n    ? new Blob([val]).size\n    : 0;\n\nexport const mergeAll = _curry1(function mergeAll(list) {\n  //@ts-ignore\n  return _objectAssign$1.apply(null, [{}].concat(list));\n});\n\nexport const flatten = _curry1(_makeFlat(true));\n\nexport const isNil = _curry1(function isNil(x) { return x == null; });\n\n/**\n * compares two (assumedly comparable) values, returns -1 on a > b, 1 on b > a, and 0 on a == b\n * @param a first value to be compared\n * @param b second value to be compared\n * @returns -1 (a > b), 1 (a < b), 0 (a == b)\n */\nexport const compare = (a: any, b: any): -1 | 1 | 0 => {\n  return (a > b) ? -1 : (a < b) ? 1 : 0;\n}\n","export enum LoadingStatus {\n  idle = \"idle\",\n  pending = \"pending\",\n  done = \"done\",\n  error = \"error\"\n};\n","import { types, getEnv, getRoot } from 'mobx-state-tree';\nimport { DepositModel, Deposit, DepositSnapshot, DepositStatus } from '.';\n//import { RootStore } from '../root-store';\nimport { Environment } from '../environment';\nimport { flow } from 'mobx';\nimport { UUIDGenerator, compare } from '../../utilities/helpers';\nimport { LoadingStatus } from '../status';\n\nexport const DepositListStoreModel = types.model(\"DepositListStore\")\n  .props({\n    status: types.optional(types.enumeration<LoadingStatus>(\"DepositListLoadingStatus\", Object.values(LoadingStatus)), LoadingStatus.idle),\n    deposits: types.optional(types.array(DepositModel), []),\n    currentlyTyping: types.optional(types.string, '')\n  })\n  .actions(self => ({\n    setStatus(value: LoadingStatus) {\n      self.status = value;\n    },\n    setDeposits(value: Deposit[] | DepositSnapshot[] | null) {\n      if(self.deposits) {\n        if(value) {\n          self.deposits.replace(value as any);\n        } else {\n          self.deposits.clear();\n        }\n      } else {\n        self.deposits = value as any;\n      }\n    },\n    setCurrentlyTyping(value: string) {\n      self.currentlyTyping = value;\n    },\n    addDeposit({value, status, context, project} = {value: '', status: DepositStatus.unprocessed, context: '', project: ''}): boolean {\n      if(self.deposits) {\n        const deposit = {\n          id: UUIDGenerator(),\n          contextId: context,\n          projectId: project,\n          value: value,\n          status: status,\n          positionInProject: null\n        };\n\n        if(project && project!=='') {\n          const root = getRoot(self);\n          if(root && root.projectStore) {\n            const projectObj = root.projectStore.findById(project);\n            if(projectObj) {\n              deposit.positionInProject = projectObj.deposits.length;\n            }\n          }\n        }\n\n        const added: Deposit = DepositModel.create(deposit);\n        const deposits = [...self.deposits, ...[added]];\n        self.deposits.replace(deposits as any);\n        return true;\n      } return false;\n    },\n    changeDeposit(index, {value, status}) {\n      if(self.deposits && self.deposits[index]) {\n        if(value && value!=='') {\n          self.deposits[index].setValue(value);\n          return true;\n        }\n        if(status && status!=='') {\n          self.deposits[index].setStatus(status);\n          return true;\n        } return false;\n      } return false;\n    }\n  }))\n  .views(self => ({\n    get environment() {\n      return getEnv(self) as Environment;\n    },\n    get rootStore() {\n      return getRoot(self) as any; //returning this as RootStore results in ts calling a circular reference\n    },\n    get isLoading() {\n      return self.status === \"pending\";\n    },\n    get items() {\n      return self.deposits;\n    },\n    get chronological() {\n      return self.deposits.slice().sort((d1, d2) => {\n        return compare(d1.dateAdded.getTime(), d2.dateAdded.getTime());\n      });\n    }\n  }))\n  .actions(self => ({\n    loadDeposits: flow(function*() {\n      self.setStatus(LoadingStatus.pending);\n      try { \n        const result = yield self.environment.depositApi.getDeposits();\n\n        //@ts-ignore\n        if(result.kind === \"ok\") {\n          //@ts-ignore\n          self.setDeposits(result.deposits);\n          self.setStatus(LoadingStatus.done);\n        } else {\n          self.setStatus(LoadingStatus.error);\n        }\n      } catch {\n        self.setStatus(LoadingStatus.error);\n      }\n    }),\n  }))\n  .views(self => ({\n    chronoView(deposits?: any) {\n      if(deposits) {\n        return deposits.slice().sort((d1, d2) => {\n          return compare(d1.dateAdded.getTime(), d2.dateAdded.getTime());\n        });\n      } else {\n        return self.chronological;\n      }\n    },\n    findById(id: string) {\n      if(self.deposits) {\n        const value = self.deposits.find((d) => d.id === id);\n        if(value) {\n          return value;\n        } return false;\n      } return false;\n    },\n    findByContext(contextID: string) {\n      return self.deposits.filter((deposit) => deposit.contextId === contextID);\n    },\n    findByProject(projectID: string) {\n      return self.deposits.filter((deposit) => deposit.projectId === projectID);\n    }\n  }));\n\ntype DepositStoreType = typeof DepositListStoreModel.Type;\nexport interface DepositStore extends DepositStoreType {};\n","import { types, getRoot } from 'mobx-state-tree';\n\nexport const ContextModel = types.model(\"Context\")\n  .props({\n    id: types.optional(types.identifier, 'xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx'),\n    name: types.optional(types.string, '')\n  })\n  .actions(self => ({\n    setName(value: string) {\n      self.name = value;\n    }\n  }))\n  .views(self => ({\n    get deposits() {\n      const root = getRoot(self);\n      if(root && root.depositStore) {\n        return root.depositStore.findByContext(self.id);\n      } return [];\n    }\n  }));\n\ntype ContextType = typeof ContextModel.Type;\nexport interface Context extends ContextType {};\n\ntype ContextSnapshotType = typeof ContextModel.SnapshotType;\nexport interface ContextSnapshot extends ContextSnapshotType {};\n","import { types, getEnv, getRoot } from 'mobx-state-tree';\nimport { Environment } from '../environment';\nimport { LoadingStatus } from '../status';\nimport { ContextModel, Context, ContextSnapshot } from './context';\nimport { UUIDGenerator, compare } from '../../utilities/helpers';\n\nexport const ContextListStoreModel = types.model(\"ContextListStore\")\n  .props({\n    status: types.optional(types.enumeration<LoadingStatus>(\"ContextListLoadingStatus\", Object.values(LoadingStatus)), LoadingStatus.idle),\n    contexts: types.optional(types.array(ContextModel), []),\n    defaultContext: types.optional(types.string, 'ERROR')\n  })\n  .actions(self => ({\n    setStatus(value: LoadingStatus) {\n      self.status = value;\n    },\n    setContexts(value: Context[] | ContextSnapshot[] | null) {\n      if(self.contexts) {\n        if(value) {\n          self.contexts.replace(value as any);\n        } else {\n          self.contexts.clear();\n        }\n      } else {\n        self.contexts = value as any;\n      }\n    },\n    setDefaultContext(id: string) {\n      if(self.contexts && self.contexts.find((c) => c.id === id)) {\n        self.defaultContext = id;\n      }\n    },\n    addContext(name: string = 'Context') {\n      if(self.contexts) {\n        const context: Context = ContextModel.create({\n          id: UUIDGenerator(),\n          name: name\n        });\n        const contexts = [...self.contexts, ...[context]];\n        self.contexts.replace(contexts as any);\n        return true;\n      } return false;\n    },\n    changeContext(index, name?) {\n      if(self.contexts && self.contexts[index]) {\n        if(name) {\n          self.contexts[index].setName(name);\n          return true;\n        } return false;\n      } return false;\n    }\n  }))\n  .views(self => ({\n    get environment() {\n      return getEnv(self) as Environment;\n    },\n    get rootStore() {\n      return getRoot(self) as any;\n    },\n    get isLoading() {\n      return self.status === \"pending\";\n    },\n    get defaultItem() {\n      return self.defaultContext;\n    },\n    get items() {\n      return self.contexts;\n    },\n    get alphabetical() {\n      return self.contexts.slice().sort((c1, c2) => {\n        const C1 = c1.name.toUpperCase(); const C2 = c2.name.toUpperCase();\n        return compare(C1, C2);\n      });\n    }\n  }))\n  .actions(self => ({\n    findByName(name: string) {\n      const value = self.contexts.find((c) => c.name === name);\n      if(value) {\n        return value;\n      } return false;\n    },\n    findById(id: string) {\n      const value = self.contexts.find((c) => c.id === id);\n      if(value) {\n        return value;\n      } return false;\n    }\n  }))\n  .actions(self => ({\n    addItem(name: string) {\n      self.addContext(name);\n    },\n    setDefaultItem(id: any) {\n      self.setDefaultContext(id);\n    }\n  }));\n\ntype ContextStoreType = typeof ContextListStoreModel.Type;\nexport interface ContextStore extends ContextStoreType {};\n","import { types, getRoot } from 'mobx-state-tree';\n\nexport const ProjectModel = types.model(\"Project\")\n  .props({\n    id: types.optional(types.identifier, 'xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx'),\n    name: types.optional(types.string, 'New Project'),\n    active: types.optional(types.boolean, false),\n    dateAdded: types.optional(types.Date, new Date()),\n    dateEdited: types.optional(types.Date, new Date()),\n    dateCompleted: types.optional(types.union(types.boolean, types.Date), false),\n  })\n  .actions(self => ({\n    setName(value: string) {\n      self.name = value;\n    },\n    setActive(value: boolean) {\n      self.active = value;\n    }\n  }))\n  .views(self => ({\n    get deposits() {\n      const root = getRoot(self);\n      if(root && root.depositStore) {\n        return root.depositStore.findByProject(self.id);\n      } return [];\n    },\n    get rootStore() {\n      return getRoot(self);\n    }\n  }));\n\ntype ProjectType = typeof ProjectModel.Type;\nexport interface Project extends ProjectType {};\n\ntype ProjectSnapshotType = typeof ProjectModel.SnapshotType;\nexport interface ProjectSnapshot extends ProjectSnapshotType {};\n","import { types, getRoot, getEnv } from 'mobx-state-tree';\nimport { Environment } from '../environment';\nimport { LoadingStatus } from '../status';\nimport { ProjectModel, Project, ProjectSnapshot } from './project';\nimport { UUIDGenerator, compare } from '../../utilities/helpers';\n\nexport const ProjectListStoreModel = types.model(\"ProjectListStore\")\n  .props({\n    status: types.optional(types.enumeration<LoadingStatus>(\"ProjectListLoadingStatus\", Object.values(LoadingStatus)), LoadingStatus.idle),\n    projects: types.optional(types.array(ProjectModel), []),\n    defaultProject: types.optional(types.string, ''),\n    selectedProject: types.optional(types.string, '')\n  })\n  .actions(self => ({\n    setStatus(value: LoadingStatus) {\n      self.status = value;\n    },\n    setProjects(value?: Project[] | ProjectSnapshot[]) {\n      if(value) {\n        if(self.projects) {\n          self.projects.replace(value as any);\n        } else {\n          self.projects = value as any;\n        }\n      } else {\n        self.projects.clear();\n      }\n    },\n    setDefaultItem(id: any) {\n      self.selectedProject = id;\n    },\n    addProject(name: string = 'Project') {\n      if(self.projects) {\n        const project: Project = ProjectModel.create({\n          id: UUIDGenerator(),\n          name: name\n        });\n        const projects = [...self.projects, ...[project]];\n        self.projects.replace(projects as any);\n        return true;\n      } return false;\n    },\n    changeProject(index, name: string) {\n      if(self.projects && self.projects[index]) {\n        if(name) {\n          self.projects[index].setName(name);\n          return true;\n        } return false;\n      } return false;\n    }\n  }))\n  .views(self => ({\n    get environment() {\n      return getEnv(self) as Environment;\n    },\n    get rootStore() {\n      return getRoot(self) as any;\n    },\n    get isLoading() {\n      return self.status === \"pending\";\n    },\n    get defaultItem() {\n      return self.defaultProject;\n    },\n    get items() {\n      return self.projects;\n    },\n    get alphabetical() {\n      return self.projects.slice().sort((p1, p2) => {\n        const P1 = p1.name.toUpperCase(); const P2 = p2.name.toUpperCase();\n        return compare(P1, P2);\n      });\n    }\n  }))\n  .actions(self => ({\n    findById(id: string) {\n      if(self.projects) {\n        const value = self.projects.find((v) => v.id === id);\n        if(value) {\n          return value;\n        } return false;\n      } return false;\n    },\n    findByName(name: string) {\n      if(self.projects) {\n        const value = self.projects.find((v) => v.name === name);\n        if(value) { \n          return value;\n        } return false;\n      } return false;\n    }\n  }))\n  .actions(self => ({\n    addItem(name: string) {\n      self.addProject(name);\n    }\n  }));\n\ntype ProjectStoreType = typeof ProjectListStoreModel.Type;\nexport interface ProjectStore extends ProjectStoreType {};\n","import { types, getEnv } from 'mobx-state-tree';\n//add other store model imports here here\nimport { DepositListStoreModel } from '../deposit';\nimport { ContextListStoreModel } from '../context';\nimport { Environment } from '../environment';\nimport { ProjectListStoreModel } from '../project';\n\n/**\n * The RootStore model\n */\nexport const RootStoreModel = types.model(\"RootStore\")\n  .props({\n    //add other stores here in format: someStore: types.optional(SomeStoreModel, {})\n    depositStore: types.optional(DepositListStoreModel, {}),\n    contextStore: types.optional(ContextListStoreModel, {}),\n    projectStore: types.optional(ProjectListStoreModel, {}),\n    user: types.optional(types.string, ''),\n    isDarkTheme: types.optional(types.boolean, true),\n    isNewStore: types.optional(types.boolean, true),\n    currentRoute: types.optional(types.string, 'dashboard'),\n  })\n  .views(self => ({\n    get environment() {\n      return getEnv(self) as Environment;\n    }\n  }))\n  .actions(self => ({\n    signIn(email, password) {\n      return self.environment.api.signInUser(email, password);\n    },\n    changeTheme() {\n      self.isDarkTheme = !self.isDarkTheme;\n      return true;\n    },\n    setIsNewStore(isNewStore: boolean) {\n      self.isNewStore = isNewStore;\n    },\n    setCurrentRoute(route: string) {\n      self.currentRoute = route;\n    }\n  }));\n\n/**\n * The RootStore instance\n */\nexport type RootStore = typeof RootStoreModel.Type;\n\n\n/**\n * The RootStore data\n */\nexport type RootStoreSnapshot = typeof RootStoreModel.SnapshotType;\n","import { Api } from '../services/api';\nimport { DepositApi } from '../services/deposit-api';\nimport { ContextApi } from '../services/context-api';\n\nexport class Environment {\n  api: Api;\n  depositApi: DepositApi;\n  contextApi: ContextApi;\n};\n\nexport const firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n","//storage.ts utility\n/**\n * Loads string from localStorage.\n * \n * @param key The key to fetch\n */\nexport const loadString = (key: string): string | null => {\n  return localStorage.getItem(key);\n}\n\n/**\n * Saves a string value to localStorage.\n * \n * @param key The key to save to\n * @param value The string to save\n */\nexport const saveString = (key: string, value: string): boolean => {\n  try {\n    localStorage.setItem(key, value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Loads an object string from localStorage and returns the object.\n * \n * @param key The key to fetch\n */\nexport const load = (key: string): any | null => {\n  const VALUE = localStorage.getItem(key);\n  if(typeof VALUE === 'string') {\n    return JSON.parse(VALUE);\n  } else return null;\n}\n\n/**\n * Saves objects and all other values to localStorage.\n * \n * @param key The key to save to\n * @param value The value (can be an object) to save\n */\nexport const save = (key: string, value: any): boolean => {\n  try {\n    if(typeof value === 'object') {\n      localStorage.setItem(key, JSON.stringify(value));\n    } else {\n      localStorage.setItem(key, value);\n    }\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Removes a key-value pair from localStorage.\n * \n * @param key The key to remove\n */\nexport const remove = (key: string): boolean => {\n  try {\n    localStorage.removeItem(key);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Clears all localStorage.\n */\nexport const clear = (): boolean => {\n  try {\n    localStorage.clear();\n    return true;\n  } catch {\n    return false;\n  }\n}\n","import { ApiResponse } from 'apisauce';\n\nexport type GeneralApiProblem = \n  /**\n   * Times up.\n   */\n  | { kind: \"timeout\"; temporary: true }\n  /**\n   * Cannot connect to the server for some reason.\n   */\n  | { kind: \"cannot-connect\"; temporary: true }\n  /**\n   * The server experienced a problem. Any 5xx error.\n   */\n  | { kind: \"server\" }\n  /**\n   * We're not allowed because we haven't identified ourself. This is 401.\n   */\n  | { kind: \"unauthorized\" }\n  /**\n   * We don't have access to perform that request. This is 403.\n   */\n  | { kind: \"forbidden\" }\n  /**\n   * Unable to find that resource.  This is a 404.\n   */\n  | { kind: \"not-found\" }\n  /**\n   * All other 4xx series errors.\n   */\n  | { kind: \"rejected\" }\n  /**\n   * Something truly unexpected happened. Most likely can try again. This is a catch all.\n   */\n  | { kind: \"unknown\"; temporary: true }\n  /**\n   * The data we received is not in the expected format.\n   */\n  | { kind: \"bad-data\" }\n\n/**\n * Attempts to get a common cause of problems from an api response.\n *\n * @param response The api response.\n */\nexport function getGeneralApiProblem(response: ApiResponse<any>): GeneralApiProblem | void | null {\n  switch (response.problem) {\n    case \"CONNECTION_ERROR\":\n      return { kind: \"cannot-connect\", temporary: true };\n    case \"NETWORK_ERROR\":\n      return { kind: \"cannot-connect\", temporary: true };\n    case \"TIMEOUT_ERROR\":\n      return { kind: \"timeout\", temporary: true };\n    case \"SERVER_ERROR\":\n      return { kind: \"server\" };\n    case \"UNKNOWN_ERROR\":\n      return { kind: \"unknown\", temporary: true };\n    case \"CLIENT_ERROR\":\n      switch (response.status) {\n        case 401:\n          return { kind: \"unauthorized\" };\n        case 403:\n          return { kind: \"forbidden\" };\n        default:\n          return { kind: \"rejected\" };\n      }\n    case \"CANCEL_ERROR\":\n      return null;\n  }\n\n  return null;\n}\n","\n\nexport interface ApiConfig {\n  url: string,\n  timeout: number,\n}\n\nexport const DEFAULT_API_CONFIG: ApiConfig = {\n  url: \"https://api.github.com\",\n  timeout: 1000,\n}\n","import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport { getGeneralApiProblem } from './api-problem';\nimport { ApiConfig, DEFAULT_API_CONFIG } from './api-config';\nimport * as Types from './api.types';\nimport * as app from 'firebase';\nimport { firebaseConfig } from '../../models/environment';\n\nexport class Api {\n  apisauce: ApisauceInstance;\n  config: ApiConfig;\n  auth: app.auth.Auth;\n  user: app.User | null | any;\n\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\n    this.config = config;\n    this.user = {\n      email: 'test'\n    };\n  }\n\n  setup(useFirebase?: boolean) {\n    this.apisauce = create({\n      baseURL: this.config.url,\n      timeout: this.config.timeout,\n      headers: {},\n    });\n\n    if(useFirebase) {\n      app.initializeApp(firebaseConfig);\n\n      this.auth = app.auth();\n    }\n  }\n\n  async getUser(username: string): Promise<Types.GetUserResult> {\n    const response: ApiResponse<any> = await this.apisauce.get(`/users/${username}`);\n\n    if(!response.ok) {\n      const problem = getGeneralApiProblem(response);\n      if(problem) return problem;\n    }\n\n    try {\n      const resultUser: Types.User = {\n\n      }\n      return { kind: \"ok\", user: resultUser };\n    } catch {\n      return { kind: \"bad-data\" };\n    }\n  }\n\n  createUser = (email, password) => {\n    this.auth.createUserWithEmailAndPassword(email, password).then((val) => {\n      this.user = val.user as app.User;\n    }, (rsn) => {\n      this.signInUser(email, password);\n    });\n  }\n\n  signInUser = (email, password): Promise<app.auth.UserCredential> => {\n    let a = this.auth.signInWithEmailAndPassword(email, password);\n    return a;\n    // this.auth.signInWithEmailAndPassword(email, password).then((val) => { console.log('yesy',val); this.user = val.user; console.log(this.user); }, (rsn) => { console.log('no',rsn) });\n  }\n\n  signOutUser = () => this.auth.signOut();\n}\n","import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport { getGeneralApiProblem } from '../api/api-problem';\nimport { ApiConfig, DEFAULT_API_CONFIG } from '../api/api-config';\nimport * as Types from './deposit-api.types';\nimport { isNil } from '../../utilities/helpers';\nimport { DepositSnapshot } from '../../models/deposit';\n\nexport class DepositApi {\n  apisauce: ApisauceInstance;\n\n  config: ApiConfig;\n\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\n    this.config = config;\n  }\n\n  setup() {\n    try {\n      this.apisauce = create({\n        baseURL: this.config.url,\n        timeout: this.config.timeout,\n        headers: {\n          Accept: \"application/json\",\n        },\n      });\n    } catch(e) {\n      console.error(e.message);\n    }\n  }\n\n  async getDeposits(completed?: boolean): Promise<Types.GetDepositsResult> {\n    const params = isNil(completed) ? {} : { completed };\n    const response: ApiResponse<any> = await this.apisauce.get(`/deposits`, params);\n    \n    if(!response.ok) {\n      const problem = getGeneralApiProblem(response);\n      if(problem) return problem;\n    }\n\n    try {\n      const deposits: DepositSnapshot[] = response.data;\n      return { kind: \"ok\", deposits };\n    } catch {\n      return { kind: \"bad-data\" };\n    }\n  }\n}\n","import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport { getGeneralApiProblem } from '../api/api-problem';\nimport { ApiConfig, DEFAULT_API_CONFIG } from '../api/api-config';\nimport * as Types from './context-api.types';\nimport { isNil } from '../../utilities/helpers';\nimport { ContextSnapshot } from '../../models/context';\n\nexport class ContextApi {\n  apisauce: ApisauceInstance;\n\n  config: ApiConfig;\n\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\n    this.config = config;\n  }\n\n  setup() {\n    try {\n      this.apisauce = create({\n        baseURL: this.config.url,\n        timeout: this.config.timeout,\n        headers: {\n          Accept: \"application/json\",\n        },\n      })\n    } catch(e) {\n      console.error(e.message);\n    }\n  }\n\n  async getContexts(completed?: boolean): Promise<Types.GetContextsResult> {\n    const params = isNil(completed) ? {} : { completed };\n    const response: ApiResponse<any> = await this.apisauce.get(`/contexts`, params);\n\n    if(!response.ok) {\n      const problem = getGeneralApiProblem(response);\n      if(problem) return problem;\n    }\n\n    try {\n      const contexts: ContextSnapshot[] = response.data;\n      return { kind: \"ok\", contexts };\n    } catch {\n      return { kind: \"bad-data\" };\n    }\n  }\n}\n","import { onSnapshot, getSnapshot } from 'mobx-state-tree';\nimport { RootStoreModel, RootStore } from '../models/root-store';\nimport { Environment } from '../models/environment';\nimport * as storage from './storage';\nimport { Api } from '../services/api';\nimport { DepositApi } from '../services/deposit-api';\nimport { ContextApi } from '../services/context-api';\nimport { ContextListStoreModel } from '../models/context';\nimport { DepositListStoreModel } from '../models/deposit';\nimport { DepositStatus } from '../models/deposit';\n\nconst ROOT_STATE_STORAGE_KEY = \"AML\";\n\nexport async function setupRootStore(useFirebase?: boolean) {\n  let rootStore: RootStore;\n  let data: any;\n\n  const env = await createEnvironment(useFirebase);\n  try {\n    data = (await storage.load(ROOT_STATE_STORAGE_KEY)) || defaultRootStore();\n    rootStore = RootStoreModel.create(data, env);\n  } catch {\n    rootStore = RootStoreModel.create(defaultRootStore(), env);\n  }\n\n  if(rootStore.isNewStore) {\n    rootStore.setIsNewStore(false);\n    storage.save(ROOT_STATE_STORAGE_KEY, getSnapshot(rootStore));\n  }\n\n  onSnapshot(rootStore, snapshot => storage.save(ROOT_STATE_STORAGE_KEY, snapshot));\n\n  return rootStore;\n}\n\nexport async function createEnvironment(useFirebase?: boolean) {\n  const env = new Environment();\n\n  env.api = new Api();\n  env.depositApi = new DepositApi();\n  env.contextApi = new ContextApi();\n\n  await env.api.setup(useFirebase);\n  await env.depositApi.setup();\n  await env.contextApi.setup();\n\n  return env;\n}\n\nexport function defaultRootStore() {\n  const defaultContextListStore = ContextListStoreModel.create();\n  defaultContextListStore.addContext('Default');\n  defaultContextListStore.setDefaultContext(defaultContextListStore.contexts[0].id);\n\n  const defaultDepositListStore = DepositListStoreModel.create();\n  defaultDepositListStore.addDeposit({\n    value: 'Hey there! Welcome to fruition.',\n    status: DepositStatus.unprocessed,\n    context: defaultContextListStore.contexts[0].id\n  });\n\n  return { depositStore: defaultDepositListStore, contextStore: defaultContextListStore };\n}\n","import React from 'react';\nimport './dashboard.scss';\n\nexport default function Dashboard(props) {\n  return(\n    <div className=\"Dashboard\">Soon<sup>TM</sup></div>\n  );\n}\n","import React from 'react';\nimport './item-select.scss';\nimport { observer } from 'mobx-react';\nimport { PlusCircle } from 'react-feather';\n\ninterface ItemSelectProps {\n  id: string;\n  store: any;\n  canBeNull: boolean;\n};\n\ninterface ItemSelectState {\n  selectedItem: any;\n  isOpen: boolean;\n  newItemInput: string;\n  error: string;\n};\n\n@observer\nexport default class ItemSelect extends React.Component<ItemSelectProps, ItemSelectState> {\n  constructor(props) {\n    super(props);\n\n    const defaultItem = this.props.store.findById(this.props.store.defaultItem);\n\n    this.state = {\n      selectedItem: defaultItem ? defaultItem : {name: '(none)', id: this.props.id+'_SELECT_NO_DEFAULT'},\n      isOpen: false,\n      newItemInput: '',\n      error: ''\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('click', this.globalToggleOpen, true);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.globalToggleOpen, true);\n  }\n\n  changeSelectedItem = (event: any) => {\n    const id = event.target.id;\n    const item = this.props.store.findById(id);\n    this.setState({ selectedItem: item ? item : {name: '(none)', id: this.props.id+'_SELECT_NO_DEFAULT'} });\n    this.props.store.setDefaultItem(id);\n  }\n\n  onFormSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const { newItemInput } = this.state;\n    const { store } = this.props;\n    if(newItemInput.length !== 0 && !store.findByName(newItemInput)) {\n      store.addItem(newItemInput);\n      this.setState({ newItemInput: '' });\n    }\n  }\n\n  onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ newItemInput: event.target.value });\n  }\n\n  toggleOpen = () => {\n    this.setState(state => ({ isOpen: !state.isOpen }));\n  }\n\n  globalToggleOpen = (event) => {\n    const ref = document.getElementById(this.props.id + '_Item_Select');\n    if(ref && event.target.id !== ref && !ref.contains(event.target)) {\n      this.setState({ isOpen: false });\n    }\n  }\n\n  render() {\n    const { isOpen, selectedItem, newItemInput } = this.state;\n    const { store, id, canBeNull } = this.props;\n    const itemSelectId = id + '_Item_Select';\n    const itemInputId = id + '_Input_Item_Select';\n\n    const items = store.items.slice().filter((c) => c.id !== selectedItem.id).map(\n      (c) => (<div key={c.id} id={c.id} className=\"item\" onClick={this.changeSelectedItem}>{ c.name }</div>)\n    );\n\n    const isDisabled = newItemInput.length === 0 || store.findByName(newItemInput);\n\n    return(\n      <div id={ itemSelectId } className=\"Item-Select\">\n        <div className=\"title\"> { id.toUpperCase() } </div>\n        <div className=\"current-item\" onClick={this.toggleOpen} style={{borderRadius: isOpen ? '4px 4px 0 0' : ''}}>\n          <div className=\"item\">{ selectedItem.name }</div>\n          <div className=\"arrow\">\n            <div className=\"arrow-inner\"></div>\n          </div>\n        </div>\n        <div className=\"other-items\" style={{display: isOpen ? 'block' : 'none'}}>\n          { items }\n    { canBeNull && selectedItem.id!==id+'_SELECT_NO_DEFAULT' ? (<div id={id+'_SELECT_NO_DEFAULT'} className=\"item item-none\" onClick={this.changeSelectedItem}>No Project</div>) : null }\n          <div className=\"add-item\">\n            <form onSubmit={this.onFormSubmit}>\n    <label htmlFor={itemInputId}>ADD { id.toUpperCase() }</label>\n              <input id={itemInputId} type=\"text\" value={newItemInput} onChange={this.onInputChange} />\n              <button type=\"submit\" disabled={isDisabled}>\n                <PlusCircle size={16} />\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport './deposit-form.scss';\nimport { X } from 'react-feather';\nimport ItemSelect from '../item-select';\nimport { DepositStatus, DepositStore } from '../../models/deposit';\nimport { ContextStore } from '../../models/context';\nimport { ProjectStore } from '../../models/project';\n\ninterface DepositFormProps {\n  store: DepositStore;\n  context: ContextStore;\n  project: ProjectStore;\n};\n\ninterface DepositFormState {\n  formInput: string;\n};\n\n@observer\nexport default class DepositForm extends React.Component<DepositFormProps, DepositFormState> {\n  constructor(props) {\n    super(props);\n\n    this.state = { formInput: props.store.currentlyTyping };\n  }\n  \n  onFormSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if(this.state.formInput !== '') {\n      const deposit = {\n        value: this.state.formInput,\n        status: DepositStatus.unprocessed,\n        context: this.props.context.defaultContext,\n        project: this.props.project.selectedProject\n      };\n      this.props.store.addDeposit(deposit);\n    }\n    this.setState({ formInput: '' });\n  }\n\n  onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ formInput: event.target.value });\n    this.props.store.setCurrentlyTyping(event.target.value);\n  }\n\n  clearForm = (event?: any) => {\n    this.setState({ formInput: '' });\n    this.props.store.setCurrentlyTyping('');\n  }\n\n  render() {\n    const { context, project } = this.props;\n\n    return (\n      <div className=\"Deposit-Form\">\n        <form onSubmit={this.onFormSubmit} className=\"deposit-form-form\">\n          <input type=\"text\" value={this.state.formInput} onChange={this.onInputChange}  className=\"deposit-form-input\" />\n          <div className=\"input-border\"></div>\n          <input type=\"submit\" className=\"deposit-submit\" value=\"Add\" disabled={this.state.formInput === ''} />\n          {this.state.formInput !== ''\n            ? (<button type=\"button\" className=\"deposit-clear\" onClick={this.clearForm}><X size={20} /></button>)\n            : null \n          }\n        </form>\n\n        <div className=\"selections\">\n          <ItemSelect id=\"Context\" store={context} canBeNull={false} />\n          <ItemSelect id=\"Project\" store={project} canBeNull={true} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './deposit-list-item.scss';\n\ntype DepositListItemProps = {\n\tvalue: string;\n\tdate: Date;\n\tstatus: boolean;\n\tchangeStatus: any;\n\tcontext: any;\n\tproject: any;\n\tdepositId: string;\n};\n\nexport default function DepositListItem(props: DepositListItemProps) {\n\tconst onCheckChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tprops.changeStatus(event, props.depositId);\n\t}\n\n\tconst { value, date, context, project, status } = props;\n\n\treturn(\n\t\t<div className=\"Deposit-List-Item\">\n\t\t\t<div className=\"deposit-check\">\n\t\t\t\t<input type=\"checkbox\" checked={status} onChange={onCheckChange} />\n\t\t\t</div>\n\t\t\t<div className=\"deposit-value\">\n\t\t\t\t<div className=\"value\" style={{textDecoration: status ? 'line-through' : 'none'}}>{value}</div>\n\t\t\t\t<div className=\"subitems\">\n\t\t\t\t\t<div className=\"context\">{ context.name }</div>\n\t\t\t\t\t{ project ? (<div className=\"project\">PROJECT: { project.name }</div>) : null }\n\t\t\t\t\t<div className=\"date\">{ date.toDateString() }</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport './button.scss';\n\nconst Button = (props: any) => {\n  const variant = props.variant && props.variant;\n  let bg = \"#3454D1\";\n  if(variant) {\n    switch(variant) {\n      case \"theme\":\n        bg = \"#922D50\";\n        break;\n      default:\n        bg = \"#3454D1\";\n        break;\n    }\n  }\n\n  return(\n    <button style={{background: bg, ...props.style}} type=\"button\" className=\"Button\" onClick={props.onClick}>{props.children}</button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport { DepositStore } from '../../models/deposit';\nimport { DepositStatus } from '../../models/deposit';\nimport { observer } from 'mobx-react';\nimport './deposits.scss';\nimport DepositForm from '../../components/deposit-form';\nimport DepositListItem from '../../dummies/deposit-list-item';\nimport Button from '../../dummies/button';\nimport { ContextStore } from '../../models/context';\nimport { ProjectStore } from '../../models/project';\n\ninterface DepositsProps {\n  depositStore: DepositStore;\n  contextStore: ContextStore;\n  projectStore: ProjectStore;\n}\n\ninterface DepositsState {\n  filters: any;\n}\n\n@observer\nexport default class Deposits extends React.Component<DepositsProps, DepositsState> {\n  constructor(props) {\n    super(props);\n\n    this.state = { filters: { hide: false } };\n  }\n\n  onChangeStatus = (event: any, id: string) => {\n    const depositIndex = this.props.depositStore.deposits.findIndex((d) => d.id === id);\n    this.props.depositStore.changeDeposit(depositIndex, {value: '', status: this.props.depositStore.deposits[depositIndex].status === DepositStatus.unprocessed ? DepositStatus.actedUpon : DepositStatus.unprocessed});\n  }\n\n  changeShown = () => {\n    this.setState(state => ({ filters: {hide: !state.filters.hide} }));\n  }\n\n  onClear = (event?: any) => {\n    this.props.depositStore.setDeposits(null);\n  }\n\n  render() {\n    const deposits = this.props.depositStore.chronological.map((d) => {\n      if(!this.state.filters.hide) {\n        if(d.status===DepositStatus.unprocessed) {\n          return (<DepositListItem key={d.id} depositId={d.id} value={d.value} status={d.status !== DepositStatus.unprocessed} date={d.dateAdded} changeStatus={this.onChangeStatus} context={this.props.contextStore.findById(d.contextId)} project={this.props.projectStore.findById(d.projectId)} />)\n        } else {\n          return null;\n        }\n      } else {\n        return (<DepositListItem key={d.id} depositId={d.id} value={d.value} status={d.status !== DepositStatus.unprocessed} date={d.dateAdded} changeStatus={this.onChangeStatus} context={this.props.contextStore.findById(d.contextId)} project={this.props.projectStore.findById(d.projectId)} />)\n      }\n    }) as any;\n\n    return (\n      <div className=\"Deposits\">\n        <DepositForm store={this.props.depositStore} context={this.props.contextStore} project={this.props.projectStore} />\n        <div className=\"deposit-list\">\n          { deposits }\n        </div>\n        <Button style={{padding: '0.5rem', marginRight: '0.4rem'}} onClick={this.onClear}>Clear Deposits</Button>\n        <Button style={{padding: '0.5rem'}} onClick={this.changeShown}>{ this.state.filters.hide ? 'Hide Finished' : 'Show Finished' }</Button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './project-list-item.scss';\nimport { DepositStatus } from '../../models/deposit';\nimport { Project } from '../../models/project';\nimport DepositListItem from '../deposit-list-item';\nimport { observer } from 'mobx-react';\n\ninterface ProjectListItemProps {\n  project: Project;\n  onGenericCallback: Function;\n}\n\nfunction ProjectListItem(props: ProjectListItemProps) {\n  const changeStatus = (event: any, depositId: string) => {\n    const e = {\n      type: 'deposit_change',\n      event: event,\n      id: depositId,\n    };\n    props.onGenericCallback(e);\n  }\n\n  const deposits = props.project.deposits.slice().map((d) => {\n    const depositProps = {\n      depositId: d.id,\n      value: d.value,\n      status: d.status !== DepositStatus.unprocessed,\n      date: d.dateAdded,\n      changeStatus: changeStatus,\n      context: props.project.rootStore.contextStore.findById(d.contextId),\n      project: props.project\n    };\n    return (<DepositListItem key={d.id} {...depositProps} />)\n  });\n\n  return(\n    <div className=\"Project-List-Item\">\n      <div className=\"title\">{ props.project.name }</div>\n      <div className=\"deposit-list\">\n        { deposits }\n      </div>\n    </div>\n  );\n}\n\nexport default observer(ProjectListItem);\n","import React from 'react';\nimport './projects.scss';\nimport { observer } from 'mobx-react';\nimport { RootStore } from '../../models/root-store';\nimport ProjectListItem from '../../dummies/project-list-item';\nimport { DepositStatus } from '../../models/deposit';\n\ninterface ProjectsProps {\n  stores: RootStore;\n}\n\ninterface ProjectsState {\n  filters?: any;\n}\n\n@observer\nexport default class Projects extends React.Component<ProjectsProps, ProjectsState> {\n\n  handleCallback = (event: any) => {\n    if(event.type === 'deposit_change' && event.id) {\n      const depositIndex = this.props.stores.depositStore.deposits.findIndex((d) => d.id === event.id);\n      this.props.stores.depositStore.changeDeposit(depositIndex, {value: '', status: this.props.stores.depositStore.deposits[depositIndex].status === DepositStatus.unprocessed ? DepositStatus.actedUpon : DepositStatus.unprocessed});\n    }\n  }\n\n  render() {\n    const { stores } = this.props;\n    const projects = stores.projectStore.projects.slice().map((p) => {\n      const props = {\n        project: p,\n        onGenericCallback: this.handleCallback\n      };\n      return <ProjectListItem key={p.id} {...props} />\n    });\n\n    return(\n      <div className=\"Projects\">\n        { projects }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './stats.scss';\n\nexport default function Stats(props) {\n  return(\n    <div className=\"Stats\">Soon<sup>TM</sup></div>\n  );\n}\n","import React from 'react';\n\nexport default function Options(props) {\n  return (<div>Coming Soon!</div>);\n}\n","import React from 'react';\nimport { RootStore } from '../../models/root-store';\n\nimport { observer } from 'mobx-react';\nimport './root-component.scss';\nimport Dashboard from '../../segments/dashboard';\nimport Deposits from '../../segments/deposits';\nimport Projects from '../../segments/projects';\nimport Stats from '../../segments/stats';\nimport Options from '../../segments/options';\n\ninterface RootComponentProps {\n  rootStore: RootStore;\n  currentRoute: string;\n}\n\ninterface RootComponentState {\n}\n\n@observer\nexport default class RootComponent extends React.Component<RootComponentProps, RootComponentState> {\n\n  render() {\n    const { rootStore, currentRoute } = this.props;\n    const depositStore = rootStore.depositStore;\n    const contextStore = rootStore.contextStore;\n    const projectStore = rootStore.projectStore;\n    let navItem;\n    switch(currentRoute) {\n      case \"dashboard\":\n        navItem = (<Dashboard />);\n        break;\n      case \"deposits\":\n        navItem = (<Deposits depositStore={depositStore} contextStore={contextStore} projectStore={projectStore} />);\n        break;\n      case \"projects\":\n        navItem = (<Projects stores={rootStore} />);\n        break;\n      case \"stats\":\n        navItem = (<Stats />);\n        break;\n      case \"options\":\n        navItem = (<Options />);\n        break;\n      default:\n        navItem = (<Deposits depositStore={depositStore} contextStore={contextStore} projectStore={projectStore} />);\n        break;\n    }\n\n    return (\n      <div className=\"Root\">\n        <div className=\"displayed-segment\">\n          { navItem }\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './nav.scss';\nimport fruition from '../../assets/images/fruition.png';\n\ninterface NavProps {\n  onSegmentChange: any;\n  initialNavState: any;\n  navItems: any;\n}\n\ninterface NavState {\n  currentNav: any;\n}\n\nexport default class Nav extends React.Component<NavProps, NavState> {\n  constructor(props) {\n    super(props);\n\n    this.state = { currentNav: props.initialNavState };\n  }\n\n  triggerSegmentChange = (event: any) => {\n    const segment = event.target.id;\n    this.props.onSegmentChange(segment);\n    this.setState({ currentNav: segment });\n  }\n\n  render() {\n    const { navItems } = this.props;\n    const { currentNav } = this.state;\n    const navs = navItems.slice().map((n) => (\n      <div key={n.name} className={n.name===currentNav ? \"nav-item active\" : \"nav-item\"} id={n.name} onClick={this.triggerSegmentChange}>\n        <div className=\"nav-icon\">{n.icon}</div>\n        {/* <div className=\"nav-text\">{n.name}</div> */}\n      </div>\n    ));\n\n    return (\n      <div className=\"Nav\">\n        { navs }\n        <div className=\"nav-item\">\n          <img src={fruition} alt=\"logo\" className=\"logo\" />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { RootStore } from '../models/root-store';\nimport { setupRootStore } from '../utilities/setup-root-store';\nimport RootComponent from '../components/root-component';\nimport { observer } from 'mobx-react';\nimport Nav from '../segments/nav';\nimport { Grid, CheckCircle, Layers, PieChart, Settings } from 'react-feather';\nimport Button from '../dummies/button';\n\ninterface AppState {\n  rootStore?: RootStore;\n  userState: any;\n}\n\n@observer\nexport default class App extends React.Component<{}, AppState> {\n  navItems: any;\n  unsubscribeFromAuthStateChanges: firebase.Unsubscribe;\n  _isMounted: boolean = false;\n\n  async componentDidMount() {\n    this._isMounted = true;\n    this.navItems = [\n      {\n        name: \"dashboard\",\n        icon: (<Grid size={24} />)\n      }, {\n        name: \"deposits\",\n        icon: (<CheckCircle size={24} />)\n      }, {\n        name: \"projects\",\n        icon: (<Layers size={24} />)\n      }, {\n        name: \"stats\",\n        icon: (<PieChart size={24} />)\n      }, {\n        name: \"options\",\n        icon: (<Settings size={24} />)\n      }\n    ];\n\n    const rootStore = await setupRootStore(false);\n\n    if(this._isMounted) {\n      this.setState({\n        userState: {},\n        rootStore\n      });\n    }\n\n    if(rootStore.environment.api.auth) {\n      this.unsubscribeFromAuthStateChanges = rootStore.environment.api.auth.onAuthStateChanged(this.authStateChange, this.authStateChangeError);\n    }\n  }\n\n  componentWillUnmount() {\n    if(this.unsubscribeFromAuthStateChanges) {\n      this.unsubscribeFromAuthStateChanges();\n    }\n    this._isMounted = false;\n  }\n\n  authStateChange = (val) => {\n    if(val && val.email && this._isMounted) {\n      this.setState({\n        userState: {\n          email: val.email\n        }\n      });\n    } else if(this._isMounted) {\n      this.setState({\n        userState: {\n          email: \"not logged in\"\n        }\n      });\n    }\n  }\n\n  authStateChangeError = (error) => {\n    console.log(error);\n  }\n\n  changeTheme = () => {\n    this.state.rootStore && this.state.rootStore.changeTheme();\n  }\n\n  onSegmentChange = (segment: string) => {\n    this.state.rootStore && this.state.rootStore.setCurrentRoute(segment);\n  }\n  \n  render() {\n    const rootStore = this.state && this.state.rootStore;\n\n    if(!rootStore) {\n      return (\n        <div>Initializing...</div>\n      );\n    }\n\n    return (\n      <div className={ rootStore.isDarkTheme ? \"App Dark\" : \"App Light\" }>\n        <Nav onSegmentChange={this.onSegmentChange} initialNavState={rootStore.currentRoute} navItems={this.navItems} />\n        <div className=\"App-inner\">\n          <RootComponent currentRoute={rootStore.currentRoute} rootStore={rootStore} />\n        </div>\n        <Button variant=\"theme\" style={{position: 'fixed', bottom: '1rem', right: '1rem', padding: '0.6rem'}} onClick={this.changeTheme}>Change Theme</Button>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/fruition.6e664e81.png\";"],"sourceRoot":""}